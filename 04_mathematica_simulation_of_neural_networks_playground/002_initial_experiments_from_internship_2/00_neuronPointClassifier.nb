(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    238788,       4673]
NotebookOptionsPosition[    236233,       4620]
NotebookOutlinePosition[    236658,       4637]
CellTagsIndexPosition[    236615,       4634]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[{
 RowBox[{"Clear", "[", 
  RowBox[{"k", ",", "r", ",", "a", ",", "b"}], "]"}], "\n", 
 RowBox[{
  RowBox[{"Get", "[", "\"\<toy2D`\>\"", "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.756191024534289*^9, 3.756191027029004*^9}, {
  3.756191094755001*^9, 3.756191096490596*^9}, {3.827373956057832*^9, 
  3.8273739568724422`*^9}},ExpressionUUID->"b09ee332-7af9-45f6-9b23-\
cfa1a69fc414"],

Cell[BoxData[
 TemplateBox[{
  "k", "shdw", 
   "\"Symbol \\!\\(\\*RowBox[{\\\"\\\\\\\"k\\\\\\\"\\\"}]\\) appears in \
multiple contexts \\!\\(\\*RowBox[{\\\"{\\\", \
RowBox[{\\\"\\\\\\\"toy2D`\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"cephalon`\\\\\\\"\\\"}], \\\"}\\\"}]\\); definitions in context \
\\!\\(\\*RowBox[{\\\"\\\\\\\"toy2D`\\\\\\\"\\\"}]\\) may shadow or be \
shadowed by other definitions.\"", 2, 2, 1, 20611628547770986266, "Local", 
   "toy2D`k"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.82737394673127*^9},
 CellLabel->
  "During evaluation of \
In[2]:=",ExpressionUUID->"d5f990db-646b-47cd-83c1-3e3aa3f52a67"],

Cell[BoxData[
 TemplateBox[{
  "r", "shdw", 
   "\"Symbol \\!\\(\\*RowBox[{\\\"\\\\\\\"r\\\\\\\"\\\"}]\\) appears in \
multiple contexts \\!\\(\\*RowBox[{\\\"{\\\", \
RowBox[{\\\"\\\\\\\"toy2D`\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"cephalon`\\\\\\\"\\\"}], \\\"}\\\"}]\\); definitions in context \
\\!\\(\\*RowBox[{\\\"\\\\\\\"toy2D`\\\\\\\"\\\"}]\\) may shadow or be \
shadowed by other definitions.\"", 2, 2, 2, 20611628547770986266, "Local", 
   "toy2D`r"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.827373946746744*^9},
 CellLabel->
  "During evaluation of \
In[2]:=",ExpressionUUID->"bb32ecd7-2f1c-47d5-b0d1-0ca966f84779"],

Cell[BoxData[
 TemplateBox[{
  "a", "shdw", 
   "\"Symbol \\!\\(\\*RowBox[{\\\"\\\\\\\"a\\\\\\\"\\\"}]\\) appears in \
multiple contexts \\!\\(\\*RowBox[{\\\"{\\\", \
RowBox[{\\\"\\\\\\\"toy2D`\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Global`\\\\\\\"\\\"}], \\\"}\\\"}]\\); definitions in context \\!\
\\(\\*RowBox[{\\\"\\\\\\\"toy2D`\\\\\\\"\\\"}]\\) may shadow or be shadowed \
by other definitions.\"", 2, 2, 3, 20611628547770986266, "Local", "toy2D`a"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.827373946766122*^9},
 CellLabel->
  "During evaluation of \
In[2]:=",ExpressionUUID->"2663242c-9e9f-41d1-a6a5-8d4edcb40dc3"],

Cell[BoxData[
 TemplateBox[{
  "b", "shdw", 
   "\"Symbol \\!\\(\\*RowBox[{\\\"\\\\\\\"b\\\\\\\"\\\"}]\\) appears in \
multiple contexts \\!\\(\\*RowBox[{\\\"{\\\", \
RowBox[{\\\"\\\\\\\"toy2D`\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"Global`\\\\\\\"\\\"}], \\\"}\\\"}]\\); definitions in context \\!\
\\(\\*RowBox[{\\\"\\\\\\\"toy2D`\\\\\\\"\\\"}]\\) may shadow or be shadowed \
by other definitions.\"", 2, 2, 4, 20611628547770986266, "Local", "toy2D`b"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.827373946783112*^9},
 CellLabel->
  "During evaluation of \
In[2]:=",ExpressionUUID->"8bbf057f-a295-4cfb-84e1-d9f5c2382a7c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fff", "=", 
  RowBox[{"Classify", "[", "data", "]"}]}]], "Input",
 CellChangeTimes->{{3.7454780706316442`*^9, 3.745478103195839*^9}, {
   3.745478490790537*^9, 3.745478490950576*^9}, {3.745480244420878*^9, 
   3.745480244956327*^9}, 3.756190961752926*^9},
 CellLabel->"In[5]:=",ExpressionUUID->"8f3daf38-a2fb-4ae2-84af-51f2b56567a6"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "2", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", "0", "1"}, "RowWithSeparators"], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "2", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", "0", "1"}, "RowWithSeparators"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["300", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 300, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "NumericalVector", "Length" -> 2]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"NumericalVector"}, "FeatureKeys" -> {"f1"},
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                 "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 300, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {-0.497103315321196, 0.04315078308533529}, 
                   "Method" -> "Naive", "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {-0.497103315321196, 0.04315078308533529}, 
                   "StandardDeviation" -> {3.352104029617706, 
                    3.463275045174281}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                   True, "Invertibility" -> "Perfect", "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                "Model" -> 
                Association[
                 "Matrix" -> {{-0.7071067811865475, -0.7071067811865475}, {
                   0.7071067811865475, -0.7071067811865475}}, "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {-0.497103315321196, 0.04315078308533529}, 
                    "StandardDeviation" -> {3.352104029617706, 
                    3.463275045174281}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 2, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.01072, "MaxTrainingMemory" -> 214912, 
                  "DataMemory" -> 5240, "FunctionMemory" -> 21752, 
                  "LanguageVersion" -> {11.3, 0}, "Date" -> 
                  DateObject[{
                    2019, 1, 11, 12, 25, 3.363861`7.279413030110792}, 
                    "Instant", "Gregorian", 2.], "ProcessorCount" -> 10, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 2, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
             "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
             7263179337424669307]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {-0.497103315321196, 0.04315078308533529}, 
             "StandardDeviation" -> {3.352104029617706, 3.463275045174281}, 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 1519634882283037191]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 5764960275667318102]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[0 -> 1, 1 -> 2]}, "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 689074351820263694, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 5167563583747307827]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[0 -> 0.3841059602649007, 1 -> 0.6158940397350994]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "NeighborsFunction" -> 
      MachineLearning`PackageScope`NeighborsFunction["Nearest", 
        NearestFunction[
         Hold[
          Nearest[CompressedData["
1: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
szST
            "] -> Automatic, Method -> "KDtree"]]]], "NeighborsNumber" -> 
      5, "ClassPriors" -> {0.3841059602649007, 0.6158940397350994}, 
      "TrainingOutput" -> 
      RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 
        1, 2, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 
        1, 2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 
        2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 
        2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 
        1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 2, 
        2, 2, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 
        1, 2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 2, 2, 
        2, 2, 1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 
        1, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 2, 
        1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 
        1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 
        1, 2, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 1, 2, 
        1, 1, 2, 2, 2, 2, 2, 1, 2, 2}], "DistributionSmoothing" -> 0.5, 
      "Processor" -> MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 1], 
         "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Method" -> "NearestNeighbors", "Options" -> 
      Association[
       "NeighborsNumber" -> 
        Association["Value" -> 5, "Options" -> Association[]], 
        "DistributionSmoothing" -> 
        Association["Value" -> 0.5, "Options" -> Association[]], 
        "NearestMethod" -> 
        Association["Value" -> "KDtree", "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.3064164766055946, 0.036801114243076784`], "Accuracy" -> 
         PlusMinus[0.8708842344835768, 0.030264329638961647`], 
         "EvaluationTime" -> 7.963888888888888*^-6, "TestSize" -> 300, 
         "TrainingSize" -> 240, "TrainingTime" -> 0.0060606666666666665`, 
         "TrainingMemory" -> 846837.3333333333, "ModelMemory" -> 10104., 
         "ExperimentCount" -> 5, "ModelUtility" -> 1.376596334421112, 
         "MeanCrossEntropyHistory" -> {
           PlusMinus[0.25220659027778614`, 0.0513644718798326], 
           PlusMinus[0.3399143006900583, 0.06918520864803317], 
           PlusMinus[0.38987018007177043`, 0.07276443202553615], 
           PlusMinus[0.2738941907803459, 0.05863728590678778], 
           PlusMinus[0.33313280942713996`, 0.06072173852689714]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.8936678647701018, 0.041590017662032956`], 
           PlusMinus[0.8117006516553479, 0.051531761719676425`], 
           PlusMinus[0.8117006516553479, 0.051531761719676425`], 
           PlusMinus[0.9264547500160033, 0.03602406472098484], 
           PlusMinus[0.8444875369012494, 0.04807950954205648]}, 
         "Configuration" -> {
          "NearestNeighbors", "NeighborsNumber" -> Automatic, 
           "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
         "FinalTrainingSize" -> 300], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 5], 
          TypeSystem`Vector[TypeSystem`AnyType, 5], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 262091947978915]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6908460272899897, 0.0023631359531936453`], 
              "Accuracy" -> 
              PlusMinus[0.5425582234518872, 0.02231779089046593], 
              "EvaluationTime" -> 4.260344827586207*^-6, "TestSize" -> 870, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.00895, 
              "TrainingMemory" -> 100808., "ModelMemory" -> 8568., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.6248115292927497, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6888450471727101, 0.0037457745739558866`], 
                PlusMinus[0.6912829105131836, 0.003917308957808529], 
                PlusMinus[0.6922299002289741, 0.003481957840890193]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5685151276305361, 0.029111322302338403`], 
                PlusMinus[0.5412950026030507, 0.029230403973199533`], 
                PlusMinus[0.5178084636802754, 0.02913829824446864]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6838740602013055, 0.006509981141684177], "Accuracy" -> 
              PlusMinus[0.6189269424772132, 0.0435546318697804], 
              "EvaluationTime" -> 3.048*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.005771, 
              "TrainingMemory" -> 67568, "ModelMemory" -> 8568, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6304129605887167, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6838740602013055, 0.004603251810681424]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6189269424772132, 0.030797775547205433`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6715996668491615, 0.009783631295785184], "Accuracy" -> 
              PlusMinus[0.6109215118883894, 0.031855039774720484`], 
              "EvaluationTime" -> 4.083333333333333*^-6, "TestSize" -> 240, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.006401800000000001, 
              "TrainingMemory" -> 87184., "ModelMemory" -> 8568., 
              "ExperimentCount" -> 4, "ModelUtility" -> 0.641288346797182, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6726300190114467, 0.01978809281760216], 
                PlusMinus[0.672160987835473, 0.019247110228112655`], 
                PlusMinus[0.6756573898983875, 0.01925744052288749], 
                PlusMinus[0.6664299588529666, 0.01851027866465526]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6149793401799384, 0.0630767134376363], 
                PlusMinus[0.5985858975569877, 0.0634953597083141], 
                PlusMinus[0.6149793401799384, 0.0630767134376363], 
                PlusMinus[0.6149793401799384, 0.0630767134376363]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 4.083333333333333*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.6715996668491615, 0.009783631295785184], 
             "ModelMemory" -> 8568., "TrainingMemory" -> 87184., 
             "TrainingTime" -> 0.016952250000000002`], "Index" -> 1], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8354106932815905, 0.0675860364821695], "Accuracy" -> 
              PlusMinus[0.5571597869094854, 0.037596199993197174`], 
              "EvaluationTime" -> 5.5241379310344825`*^-6, "TestSize" -> 870, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.007794999999999999, 
              "TrainingMemory" -> 359404., "ModelMemory" -> 5480., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.5088110364568746, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.898478864590281, 0.047581862786666665`], 
                PlusMinus[0.9563661358343187, 0.049334046851041466`], 
                PlusMinus[0.7448538238432758, 0.03417112605394077]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5172219403167131, 0.029309353952836858`], 
                PlusMinus[0.5277311886878574, 0.029257003419639174`], 
                PlusMinus[0.6230272982205226, 0.028538913024427782`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6890199098177681, 0.07554638232248055], "Accuracy" -> 
              PlusMinus[0.7000248964494088, 0.04113094947297691], 
              "EvaluationTime" -> 5.024*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.005812, 
              "TrainingMemory" -> 77752, "ModelMemory" -> 5480, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6134440861156711, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6890199098177681, 0.053419359234337514`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7000248964494088, 0.029083973288983222`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.37142021905888084`, 0.06640823287867302], 
              "Accuracy" -> 
              PlusMinus[0.8597430951348847, 0.028548515682614257`], 
              "EvaluationTime" -> 5.619444444444445*^-6, "TestSize" -> 300, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.009343333333333332, 
              "TrainingMemory" -> 113996., "ModelMemory" -> 5821.333333333333,
               "ExperimentCount" -> 5, "ModelUtility" -> 1.1228016324537249`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.3922924532442209, 0.1071972067018591], 
                PlusMinus[0.2922585831325992, 0.0808342566678282], 
                PlusMinus[0.5282213523558682, 0.1286630412368063], 
                PlusMinus[0.31791709690608166`, 0.08442622383622653], 
                PlusMinus[0.5168416270037202, 0.1321038116365338]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8280940942782987, 0.04987972039785297], 
                PlusMinus[0.9100613073930527, 0.03896327834222684], 
                PlusMinus[0.7953072090323973, 0.053049477987075974`], 
                PlusMinus[0.8772744221471511, 0.04396033176495386], 
                PlusMinus[0.8444875369012494, 0.04807950954205648]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 5.619444444444445*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.37142021905888084`, 0.06640823287867302], 
             "ModelMemory" -> 5821.333333333333, "TrainingMemory" -> 113996., 
             "TrainingTime" -> 0.019474166666666664`], "Index" -> 2], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6934346136930039, 0.022372842994308174`], 
              "Accuracy" -> 
              PlusMinus[0.5838751201218038, 0.04156171897745676], 
              "EvaluationTime" -> 0.00002245375, "TestSize" -> 600, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.00711875, 
              "TrainingMemory" -> 173610., "ModelMemory" -> 85048., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.6189105673214335, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7594412855534008, 0.03144854657038458], 
                PlusMinus[0.6928787774138919, 0.004081267902118075], 
                PlusMinus[0.6928787774138919, 0.004081267902118075]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5100727047393174, 0.03529007327844314], 
                PlusMinus[0.6140196417781905, 0.034509042398840555`], 
                PlusMinus[0.6239228787992446, 0.03434667466642195]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6389984863537005, 0.021013466197171694`], 
              "Accuracy" -> 
              PlusMinus[0.6981558391185775, 0.06527153188536065], 
              "EvaluationTime" -> 0.00004418, "TestSize" -> 100, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.010981, 
              "TrainingMemory" -> 173056, "ModelMemory" -> 86736, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6715524807131509, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6389984863537005, 0.014858764444254397`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6981558391185775, 0.046153942814572475`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.3903938144700435, 0.022597364920103925`], 
              "Accuracy" -> 
              PlusMinus[0.8546214943800009, 0.028201516297564976`], 
              "EvaluationTime" -> 0.000034374999999999995`, "TestSize" -> 300,
               "TrainingSize" -> 240, "TrainingTime" -> 0.008013833333333333, 
              "TrainingMemory" -> 219317.3333333333, "ModelMemory" -> 
              95250.66666666666, "ExperimentCount" -> 5, "ModelUtility" -> 
              1.093767445073815, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.35430428912846934`, 0.03433215693231246], 
                PlusMinus[0.41961469476245783`, 0.04354191712054495], 
                PlusMinus[0.43537200852745006`, 0.05758193271799671], 
                PlusMinus[0.3899715252822803, 0.031733735926535014`], 
                PlusMinus[0.3947736817412823, 0.046115683455304375`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8608809795242002, 0.04611377948556854], 
                PlusMinus[0.8936678647701018, 0.041590017662032956`], 
                PlusMinus[0.7953072090323973, 0.053049477987075974`], 
                PlusMinus[0.8772744221471511, 0.04396033176495386], 
                PlusMinus[0.8117006516553479, 0.051531761719676425`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000034374999999999995`, "MeanCrossEntropy" -> 
             PlusMinus[0.3903938144700435, 0.022597364920103925`], 
             "ModelMemory" -> 95250.66666666666, "TrainingMemory" -> 
             219317.3333333333, "TrainingTime" -> 0.017136041666666664`], 
           "Index" -> 3], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.3022382391345724`, 0.056391442961857385`], 
              "Accuracy" -> PlusMinus[0.528002639541086, 0.03249838692212781],
               "EvaluationTime" -> 3.316379310344827*^-6, "TestSize" -> 870, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.0029017500000000002`, 
              "TrainingMemory" -> 52204., "ModelMemory" -> 14776., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.3288453683349365, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.306615783468097, 0.09285398531404108], 
                PlusMinus[1.3221262096489503`, 0.09657604016940988], 
                PlusMinus[1.2779587005404833`, 0.09589914737056789]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5275683972737976, 0.029281289882830505`], 
                PlusMinus[0.4796064630451817, 0.02930679916251869], 
                PlusMinus[0.575853182608092, 0.02901103568436918]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7058647194049049, 0.054326100864198], "Accuracy" -> 
              PlusMinus[0.6627524187330199, 0.042453740520572714`], 
              "EvaluationTime" -> 4.612*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.003342, 
              "TrainingMemory" -> 47672, "ModelMemory" -> 14840, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6026591070818879, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7058647194049049, 0.03841435431649876]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6627524187330199, 0.030019327808831073`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5474684940713784, 0.03474869500276249], "Accuracy" -> 
              PlusMinus[0.6766677507646854, 0.034355576696120924`], 
              "EvaluationTime" -> 4.624999999999999*^-6, "TestSize" -> 300, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.003287166666666666, 
              "TrainingMemory" -> 67937.33333333334, "ModelMemory" -> 17112., 
              "ExperimentCount" -> 5, "ModelUtility" -> 0.779093805143414, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.4750288656602407, 0.04541055142904771], 
                PlusMinus[0.5586746557275692, 0.0666776485195777], 
                PlusMinus[0.6127936536875224, 0.07344515068666742], 
                PlusMinus[0.5826233335992372, 0.05684005586358207], 
                PlusMinus[0.5792820708062729, 0.057516521005250724`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.729733438540594, 0.05797441338896458], 
                PlusMinus[0.7133399959176432, 0.05895507362028697], 
                PlusMinus[0.6477662254258401, 0.06201822308572987], 
                PlusMinus[0.6641596680487908, 0.061374564256893395`], 
                PlusMinus[0.6149793401799384, 0.0630767134376363]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 4.624999999999999*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.5474684940713784, 0.03474869500276249], 
             "ModelMemory" -> 17112., "TrainingMemory" -> 67937.33333333334, 
             "TrainingTime" -> 0.007010708333333332], "Index" -> 4], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.9543068139891747, 0.046348296695987376`], 
              "Accuracy" -> 
              PlusMinus[0.5582923347444358, 0.03673929028523506], 
              "EvaluationTime" -> 6.085344827586207*^-6, "TestSize" -> 870, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.002895, 
              "TrainingMemory" -> 62670., "ModelMemory" -> 6096., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.44827151008553345`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.9774765499068252, 0.0607183744195392], 
                PlusMinus[0.8825173626542365, 0.054555805005232424`], 
                PlusMinus[0.9937991381310183, 0.04705594892153235]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5786813019920533, 0.02903926258472396], 
                PlusMinus[0.6009191804703075, 0.028655197838178197`], 
                PlusMinus[0.4935582772643226, 0.029167492735053115`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.45342715003754736`, 0.08826491043067336], 
              "Accuracy" -> 
              PlusMinus[0.8268687104057066, 0.05429034481363133], 
              "EvaluationTime" -> 5.4400000000000004`*^-6, "TestSize" -> 100, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.002346, 
              "TrainingMemory" -> 93072, "ModelMemory" -> 6872, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.9169222954538622, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.45342715003754736`, 0.06241271670635236]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8268687104057066, 0.03838907097067462]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.3064164766055946, 0.036801114243076784`], 
              "Accuracy" -> 
              PlusMinus[0.8708842344835768, 0.030264329638961647`], 
              "EvaluationTime" -> 7.963888888888888*^-6, "TestSize" -> 300, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.0060606666666666665`,
               "TrainingMemory" -> 846837.3333333333, "ModelMemory" -> 10104.,
               "ExperimentCount" -> 5, "ModelUtility" -> 1.376596334421112, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.25220659027778614`, 0.0513644718798326], 
                PlusMinus[0.3399143006900583, 0.06918520864803317], 
                PlusMinus[0.38987018007177043`, 0.07276443202553615], 
                PlusMinus[0.2738941907803459, 0.05863728590678778], 
                PlusMinus[0.33313280942713996`, 0.06072173852689714]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8936678647701018, 0.041590017662032956`], 
                PlusMinus[0.8117006516553479, 0.051531761719676425`], 
                PlusMinus[0.8117006516553479, 0.051531761719676425`], 
                PlusMinus[0.9264547500160033, 0.03602406472098484], 
                PlusMinus[0.8444875369012494, 0.04807950954205648]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 7.963888888888888*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.3064164766055946, 0.036801114243076784`], 
             "ModelMemory" -> 10104., "TrainingMemory" -> 846837.3333333333, 
             "TrainingTime" -> 0.010470833333333332`], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7480030372047776, 0.7601545126416727], "Accuracy" -> 
              PlusMinus[0.5359914403801255, 0.025677506608769645`], 
              "EvaluationTime" -> 3.2672413793103445`*^-6, "TestSize" -> 870, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.0108655, 
              "TrainingMemory" -> 67840., "ModelMemory" -> 8568., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.4799195309142421, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[3.0912197638876364`, 0.24645471400992394`], 
                PlusMinus[0.9452704700472894, 0.047017186278263325`], 
                PlusMinus[0.6977518558003069, 0.019828207038837215`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5277311886878574, 0.029257003419639174`], 
                PlusMinus[0.5069313017622541, 0.029316111006488236`], 
                PlusMinus[0.5725805863422885, 0.029014500477534722`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6659238377025133, 0.02191158492944405], "Accuracy" -> 
              PlusMinus[0.6149400718010324, 0.043638820314126504`], 
              "EvaluationTime" -> 4.184*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.007956, 
              "TrainingMemory" -> 68976, "ModelMemory" -> 8568, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6443978810972089, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6659238377025133, 0.015493830290154846`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6149400718010324, 0.03085730576710011]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6679083080601906, 0.01691826420577164], "Accuracy" -> 
              PlusMinus[0.6109215118883894, 0.031855039774720484`], 
              "EvaluationTime" -> 4.263333333333333*^-6, "TestSize" -> 240, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.0153772, 
              "TrainingMemory" -> 101822.40000000001`, "ModelMemory" -> 8568.,
               "ExperimentCount" -> 4, "ModelUtility" -> 0.6434515693490277, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6717091428382501, 0.03436697882694334], 
                PlusMinus[0.6687078020788414, 0.03296453238017418], 
                PlusMinus[0.6756164592957652, 0.03299269717990839], 
                PlusMinus[0.6570378460469432, 0.031385940078821555`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6149793401799384, 0.0630767134376363], 
                PlusMinus[0.5985858975569877, 0.0634953597083141], 
                PlusMinus[0.6149793401799384, 0.0630767134376363], 
                PlusMinus[0.6149793401799384, 0.0630767134376363]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 4.263333333333333*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.6679083080601906, 0.01691826420577164], 
             "ModelMemory" -> 8568., "TrainingMemory" -> 101822.40000000001`, 
             "TrainingTime" -> 0.030087000000000003`], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6928677523439476, 0.0019871048623970465`], 
              "Accuracy" -> 
              PlusMinus[0.5413577416944502, 0.023022070068701342`], 
              "EvaluationTime" -> 3.244827586206897*^-6, "TestSize" -> 870, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.004913000000000001, 
              "TrainingMemory" -> 62654., "ModelMemory" -> 8568., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.623057212158762, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.692865697817962, 0.003441751072556694], 
                PlusMinus[0.6928679689198832, 0.003441767863859561], 
                PlusMinus[0.6928695903260904, 0.0034417791424889]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5685151276305361, 0.029111322302338403`], 
                PlusMinus[0.5412950026030507, 0.029230403973199533`], 
                PlusMinus[0.5141445298105537, 0.029174673083709468`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6928671029849343, 0.0057716437801033], "Accuracy" -> 
              PlusMinus[0.6141975528947993, 0.0487793261820397], 
              "EvaluationTime" -> 7.62*^-6, "TestSize" -> 200, "TrainingSize" -> 
              50, "TrainingTime" -> 0.007507, "TrainingMemory" -> 66704, 
              "ModelMemory" -> 8568, "ExperimentCount" -> 1, "ModelUtility" -> 
              0.622378279010682, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6928671029849343, 0.004081168455504202]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6141975528947993, 0.03449219232503077]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.692635510726572, 0.0042660076534369725`], 
              "Accuracy" -> 
              PlusMinus[0.6117352164832838, 0.028435565163500678`], 
              "EvaluationTime" -> 4.480555555555556*^-6, "TestSize" -> 300, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.005424666666666666, 
              "TrainingMemory" -> 85376., "ModelMemory" -> 8568., 
              "ExperimentCount" -> 5, "ModelUtility" -> 0.6228563753165938, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6926372118373801, 0.009539120044657647], 
                PlusMinus[0.6926383271436989, 0.009539137124163112], 
                PlusMinus[0.6926452496702885, 0.009539279312519714], 
                PlusMinus[0.6926266817947445, 0.009538895042866521], 
                PlusMinus[0.6926300841092033, 0.009538970057769878]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6149793401799384, 0.0630767134376363], 
                PlusMinus[0.5985858975569877, 0.0634953597083141], 
                PlusMinus[0.6149793401799384, 0.0630767134376363], 
                PlusMinus[0.6149793401799384, 0.0630767134376363], 
                PlusMinus[0.6149793401799384, 0.0630767134376363]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 4.480555555555556*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.692635510726572, 0.0042660076534369725`], 
             "ModelMemory" -> 8568., "TrainingMemory" -> 85376., 
             "TrainingTime" -> 0.011693833333333334`], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7180321183676852, 0.05122081732492357], "Accuracy" -> 
              PlusMinus[0.541547878137254, 0.018376883928999665`], 
              "EvaluationTime" -> 2.9793103448275866`*^-6, "TestSize" -> 870, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.008232, 
              "TrainingMemory" -> 66222., "ModelMemory" -> 8568., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.5931043987880779, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8524035423877608, 0.04452376545494546], 
                PlusMinus[0.8117298625822996, 0.03213557037531912], 
                PlusMinus[0.6871250903174542, 0.013963487529512346`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5448566961183028, 0.02920954347705382], 
                PlusMinus[0.527507797306781, 0.029305110658665878`], 
                PlusMinus[0.5521196075225219, 0.029115901813888092`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6657929080000704, 0.020899589260871907`], 
              "Accuracy" -> 
              PlusMinus[0.6149400718010324, 0.043638820314126504`], 
              "EvaluationTime" -> 4.059999999999999*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.009742, 
              "TrainingMemory" -> 69584, "ModelMemory" -> 8568, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6447184858157899, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6657929080000704, 0.01477824129037607]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6149400718010324, 0.03085730576710011]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6678508623014011, 0.016774927413107796`], 
              "Accuracy" -> 
              PlusMinus[0.6109215118883894, 0.031855039774720484`], 
              "EvaluationTime" -> 4.283333333333333*^-6, "TestSize" -> 240, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.0079158, 
              "TrainingMemory" -> 87750.40000000001, "ModelMemory" -> 8568., 
              "ExperimentCount" -> 4, "ModelUtility" -> 0.6435341216867742, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6715734571857648, 0.0340723648332428], 
                PlusMinus[0.6686508040943673, 0.032694055748820755`], 
                PlusMinus[0.6754851370364813, 0.03271673367524037], 
                PlusMinus[0.6571048088115999, 0.03113243563408297]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6149793401799384, 0.0630767134376363], 
                PlusMinus[0.5985858975569877, 0.0634953597083141], 
                PlusMinus[0.6149793401799384, 0.0630767134376363], 
                PlusMinus[0.6149793401799384, 0.0630767134376363]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 4.283333333333333*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.6678508623014011, 0.016774927413107796`], 
             "ModelMemory" -> 8568., "TrainingMemory" -> 87750.40000000001, 
             "TrainingTime" -> 0.01812675], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7478027537185751, 0.787375245766106], "Accuracy" -> 
              PlusMinus[0.5359914403801255, 0.025677506608769645`], 
              "EvaluationTime" -> 2.7465517241379307`*^-6, "TestSize" -> 870, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.01105175, 
              "TrainingMemory" -> 68050., "ModelMemory" -> 8568., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.4771395752975202, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[3.1733971709300968`, 0.2533846954130022], 
                PlusMinus[0.9455765946403082, 0.047047667167892375`], 
                PlusMinus[0.6977754114446778, 0.019837230137094944`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5277311886878574, 0.029257003419639174`], 
                PlusMinus[0.5069313017622541, 0.029316111006488236`], 
                PlusMinus[0.5725805863422885, 0.029014500477534722`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6659240541139229, 0.02191264793254839], "Accuracy" -> 
              PlusMinus[0.6149400718010324, 0.043638820314126504`], 
              "EvaluationTime" -> 3.1600000000000002`*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.007213, 
              "TrainingMemory" -> 69280, "ModelMemory" -> 8568, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6443974693272224, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6659240541139229, 0.015494581946858347`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6149400718010324, 0.03085730576710011]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6679083681561718, 0.016918407612097845`], 
              "Accuracy" -> 
              PlusMinus[0.6109215118883894, 0.031855039774720484`], 
              "EvaluationTime" -> 3.9366666666666665`*^-6, "TestSize" -> 240, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.0076858, 
              "TrainingMemory" -> 87740.8, "ModelMemory" -> 8568., 
              "ExperimentCount" -> 4, "ModelUtility" -> 0.6434514844638324, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6717092818705802, 0.03436727477676344], 
                PlusMinus[0.6687078613315468, 0.03296480246578187], 
                PlusMinus[0.6756165934469645, 0.03299297255427408], 
                PlusMinus[0.6570377813689657, 0.03138619358544977]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6149793401799384, 0.0630767134376363], 
                PlusMinus[0.5985858975569877, 0.0634953597083141], 
                PlusMinus[0.6149793401799384, 0.0630767134376363], 
                PlusMinus[0.6149793401799384, 0.0630767134376363]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 3.9366666666666665`*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.6679083681561718, 0.016918407612097845`], 
             "ModelMemory" -> 8568., "TrainingMemory" -> 87740.8, 
             "TrainingTime" -> 0.020659], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6928700079230763, 0.001987113851035415], "Accuracy" -> 
              PlusMinus[0.5413577416944502, 0.023022070068701342`], 
              "EvaluationTime" -> 3.1241379310344826`*^-6, "TestSize" -> 870, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.004570749999999999, 
              "TrainingMemory" -> 62360., "ModelMemory" -> 8568., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.6230551834715087, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6928698024594258, 0.0034417806462432167`], 
                PlusMinus[0.6928700295501748, 0.0034417823052429277`], 
                PlusMinus[0.6928701917599521, 0.0034417834831016246`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5685151276305361, 0.029111322302338403`], 
                PlusMinus[0.5412950026030507, 0.029230403973199533`], 
                PlusMinus[0.5141445298105537, 0.029174673083709468`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.692847685285887, 0.005434107989480703], "Accuracy" -> 
              PlusMinus[0.6189269424772132, 0.0435546318697804], 
              "EvaluationTime" -> 3.116*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.004559, 
              "TrainingMemory" -> 66696, "ModelMemory" -> 8568, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6224562432680409, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.692847685285887, 0.0038424946090618007`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6189269424772132, 0.030797775547205433`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6926960376890938, 0.0042665235024631], "Accuracy" -> 
              PlusMinus[0.6117352164832838, 0.028435565163500678`], 
              "EvaluationTime" -> 6.391666666666667*^-6, "TestSize" -> 300, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.0051758333333333335`,
               "TrainingMemory" -> 85354.66666666667, "ModelMemory" -> 8568., 
              "ExperimentCount" -> 5, "ModelUtility" -> 0.6228019239781802, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6926962076840713, 0.00954024005244889], 
                PlusMinus[0.6926963197419639, 0.009540242270380857], 
                PlusMinus[0.6926970124936076, 0.00954025634312451], 
                PlusMinus[0.6926951540910783, 0.009540218562224595], 
                PlusMinus[0.6926954944438425, 0.00954022552766061]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6149793401799384, 0.0630767134376363], 
                PlusMinus[0.5985858975569877, 0.0634953597083141], 
                PlusMinus[0.6149793401799384, 0.0630767134376363], 
                PlusMinus[0.6149793401799384, 0.0630767134376363], 
                PlusMinus[0.6149793401799384, 0.0630767134376363]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 6.391666666666667*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.6926960376890938, 0.0042665235024631], "ModelMemory" -> 
             8568., "TrainingMemory" -> 85354.66666666667, "TrainingTime" -> 
             0.011040541666666667`], "Index" -> 10], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 13], "LearningRate" -> 
             Association["Value" -> 0.1], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 10], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 15], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6887813493691471, 0.03123392516958313], "Accuracy" -> 
              PlusMinus[0.60036677425553, 0.04892972183577295], 
              "EvaluationTime" -> 0.00002833, "TestSize" -> 200, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.033065, 
              "TrainingMemory" -> 420576, "ModelMemory" -> 109488, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6214758618702834, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6887813493691471, 0.022085720290485417`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.60036677425553, 0.03459853811164654]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6928702585889197, 0.001987114901772439], "Accuracy" -> 
              PlusMinus[0.6151278942803226, 0.016691414921996862`], 
              "EvaluationTime" -> 4.7939655172413785`*^-6, "TestSize" -> 870, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.0060275, 
              "TrainingMemory" -> 60084., "ModelMemory" -> 20240., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.6230548491117229, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6928702585889196, 0.003441783970347104], 
                PlusMinus[0.6928702585889196, 0.003441783970347104], 
                PlusMinus[0.6928702585889196, 0.003441783970347104]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6129121622980832, 0.02866690223503908], 
                PlusMinus[0.6127884401529662, 0.028676573500129164`], 
                PlusMinus[0.6196549495477817, 0.028583198402204114`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.3462541391123797, 0.03734196543361871], "Accuracy" -> 
              PlusMinus[0.8645536877902749, 0.033936344796617356`], 
              "EvaluationTime" -> 0.00003368333333333333, "TestSize" -> 300, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.029783999999999995`, 
              "TrainingMemory" -> 519530.6666666666, "ModelMemory" -> 
              114293.33333333333`, "ExperimentCount" -> 5, "ModelUtility" -> 
              1.221135597644664, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.3007612011318182, 0.06567956922534185], 
                PlusMinus[0.36577581569014916`, 0.07178802651450185], 
                PlusMinus[0.38391441002423954`, 0.08854389870668665], 
                PlusMinus[0.3204868614645914, 0.04956127103778559], 
                PlusMinus[0.42567509755728916`, 0.07988759195262038]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8772744221471511, 0.04396033176495386], 
                PlusMinus[0.8772744221471511, 0.04396033176495386], 
                PlusMinus[0.8936678647701018, 0.041590017662032956`], 
                PlusMinus[0.8772744221471511, 0.04396033176495386], 
                PlusMinus[0.7461268811635448, 0.05689950087494518]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00003368333333333333, "MeanCrossEntropy" -> 
             PlusMinus[0.3462541391123797, 0.03734196543361871], 
             "ModelMemory" -> 114293.33333333333`, "TrainingMemory" -> 
             519530.6666666666, "TrainingTime" -> 0.070295], "Index" -> 11], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^-6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7478008217370559, 0.7876392101687564], "Accuracy" -> 
              PlusMinus[0.5359914403801255, 0.025677506608769645`], 
              "EvaluationTime" -> 2.8922413793103443`*^-6, "TestSize" -> 870, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.01076325, 
              "TrainingMemory" -> 68076., "ModelMemory" -> 8568., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.4771127697719093, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[3.1741938594345447`, 0.25345184586528513`], 
                PlusMinus[0.945579389583716, 0.04704794543816936], 
                PlusMinus[0.6977756249365368, 0.019837312328467978`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5277311886878574, 0.029257003419639174`], 
                PlusMinus[0.5069313017622541, 0.029316111006488236`], 
                PlusMinus[0.5725805863422885, 0.029014500477534722`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6656706872243017, 0.021837901017100335`], 
              "Accuracy" -> 
              PlusMinus[0.6152795789210517, 0.04359739183153302], 
              "EvaluationTime" -> 2.5279999999999998`*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.006943, 
              "TrainingMemory" -> 69280, "ModelMemory" -> 8568, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.64465551817086, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6656706872243017, 0.015441727896072248`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6152795789210517, 0.030828011406123994`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6679083684891876, 0.0169184089459276], "Accuracy" -> 
              PlusMinus[0.6109215118883894, 0.031855039774720484`], 
              "EvaluationTime" -> 3.706666666666667*^-6, "TestSize" -> 240, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.0069146, 
              "TrainingMemory" -> 87844.8, "ModelMemory" -> 8568., 
              "ExperimentCount" -> 4, "ModelUtility" -> 0.6434514840369193, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6717092835662853, 0.034367277129485604`], 
                PlusMinus[0.6687078613543085, 0.03296480433525528], 
                PlusMinus[0.675616595171726, 0.03299297637515709], 
                PlusMinus[0.657037780444342, 0.03138619542580102]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6149793401799384, 0.0630767134376363], 
                PlusMinus[0.5985858975569877, 0.0634953597083141], 
                PlusMinus[0.6149793401799384, 0.0630767134376363], 
                PlusMinus[0.6149793401799384, 0.0630767134376363]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 3.706666666666667*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.6679083684891876, 0.0169184089459276], "ModelMemory" -> 
             8568., "TrainingMemory" -> 87844.8, "TrainingTime" -> 0.0194065],
            "Index" -> 12], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6924198945128476, 0.0048680614976441975`], 
              "Accuracy" -> 
              PlusMinus[0.5685151276305361, 0.04116962681858133], 
              "EvaluationTime" -> 2.7724137931034484`*^-6, "TestSize" -> 290, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.004853, 
              "TrainingMemory" -> 63184, "ModelMemory" -> 8568, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6229418968214087, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6924198945128476, 0.003442239296217352]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5685151276305361, 0.029111322302338403`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6916841912654835, 0.005439308796398965], "Accuracy" -> 
              PlusMinus[0.6189269424772132, 0.0435546318697804], 
              "EvaluationTime" -> 3.536*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.006894, 
              "TrainingMemory" -> 67480, "ModelMemory" -> 8568, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6235007087274692, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6916841912654835, 0.0038461721349013463`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6189269424772132, 0.030797775547205433`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6870328762758524, 0.004478724629973432], "Accuracy" -> 
              PlusMinus[0.6117352164832838, 0.028435565163500678`], 
              "EvaluationTime" -> 3.833333333333333*^-6, "TestSize" -> 300, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.005915833333333334, 
              "TrainingMemory" -> 86280., "ModelMemory" -> 8568., 
              "ExperimentCount" -> 5, "ModelUtility" -> 0.6278905290558549, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6872140312710003, 0.010036776283071912`], 
                PlusMinus[0.6872778665484706, 0.009996799021652462], 
                PlusMinus[0.6879165089536867, 0.010018398616666894`], 
                PlusMinus[0.6862238109016839, 0.009931104194490725], 
                PlusMinus[0.6865496315119584, 0.009981504876932355]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6149793401799384, 0.0630767134376363], 
                PlusMinus[0.5985858975569877, 0.0634953597083141], 
                PlusMinus[0.6149793401799384, 0.0630767134376363], 
                PlusMinus[0.6149793401799384, 0.0630767134376363], 
                PlusMinus[0.6149793401799384, 0.0630767134376363]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 3.833333333333333*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.6870328762758524, 0.004478724629973432], 
             "ModelMemory" -> 8568., "TrainingMemory" -> 86280., 
             "TrainingTime" -> 0.012247791666666667`], "Index" -> 13], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6656683186273854, 0.02182697989617349], "Accuracy" -> 
              PlusMinus[0.6152795789210517, 0.04359739183153302], 
              "EvaluationTime" -> 2.868*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.007525, 
              "TrainingMemory" -> 69080, "ModelMemory" -> 8568, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6446598983301289, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6656683186273854, 0.015434005497406719`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6152795789210517, 0.030828011406123994`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6667353541588833, 0.015039865711670498`], 
              "Accuracy" -> 
              PlusMinus[0.6117352164832838, 0.028435565163500678`], 
              "EvaluationTime" -> 4.047222222222221*^-6, "TestSize" -> 300, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.007189166666666665, 
              "TrainingMemory" -> 87804., "ModelMemory" -> 8568., 
              "ExperimentCount" -> 5, "ModelUtility" -> 0.6449394092021129, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6717078804870501, 0.03436429591174088], 
                PlusMinus[0.6687072621639734, 0.032962070975788654`], 
                PlusMinus[0.6756152415036732, 0.032990184317678195`], 
                PlusMinus[0.6570384358773772, 0.03138363340105992], 
                PlusMinus[0.6621565197919563, 0.03248328168706767]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6149793401799384, 0.0630767134376363], 
                PlusMinus[0.5985858975569877, 0.0634953597083141], 
                PlusMinus[0.6149793401799384, 0.0630767134376363], 
                PlusMinus[0.6149793401799384, 0.0630767134376363], 
                PlusMinus[0.6149793401799384, 0.0630767134376363]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 4.047222222222221*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.6667353541588833, 0.015039865711670498`], 
             "ModelMemory" -> 8568., "TrainingMemory" -> 87804., 
             "TrainingTime" -> 0.01651145833333333], "Index" -> 14], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6656478894314307, 0.021729264280864663`], 
              "Accuracy" -> 
              PlusMinus[0.6152795789210517, 0.04359739183153302], 
              "EvaluationTime" -> 3.604*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.009165, 
              "TrainingMemory" -> 69280, "ModelMemory" -> 8568, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6446983587389, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6656478894314307, 0.015364910123194032`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6152795789210517, 0.030828011406123994`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6679023407482473, 0.016903924302862992`], 
              "Accuracy" -> 
              PlusMinus[0.6109215118883894, 0.031855039774720484`], 
              "EvaluationTime" -> 3.923333333333334*^-6, "TestSize" -> 240, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.0073846, 
              "TrainingMemory" -> 87768., "ModelMemory" -> 8568., 
              "ExperimentCount" -> 4, "ModelUtility" -> 0.6434600385470233, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6716952960710497, 0.03433750037537208], 
                PlusMinus[0.6687018936010083, 0.03293748656505671], 
                PlusMinus[0.6756030915848574, 0.03296508816296316], 
                PlusMinus[0.6570443496743615, 0.0313605939005952]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6149793401799384, 0.0630767134376363], 
                PlusMinus[0.5985858975569877, 0.0634953597083141], 
                PlusMinus[0.6149793401799384, 0.0630767134376363], 
                PlusMinus[0.6149793401799384, 0.0630767134376363]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 3.923333333333334*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.6679023407482473, 0.016903924302862992`], 
             "ModelMemory" -> 8568., "TrainingMemory" -> 87768., 
             "TrainingTime" -> 0.01839575], "Index" -> 15], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6676906823721621, 0.014916551878517755`], 
              "Accuracy" -> 
              PlusMinus[0.6191985908440321, 0.04352155655950071], 
              "EvaluationTime" -> 2.3200000000000002`*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.005518, 
              "TrainingMemory" -> 68544, "ModelMemory" -> 8568, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6440444556423305, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6676906823721621, 0.010547594985220838`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6191985908440321, 0.03077438777101682]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.666497446473893, 0.013881628519046606`], "Accuracy" -> 
              PlusMinus[0.6117352164832838, 0.028435565163500678`], 
              "EvaluationTime" -> 4.780555555555556*^-6, "TestSize" -> 300, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.007601666666666667, 
              "TrainingMemory" -> 87668., "ModelMemory" -> 8568., 
              "ExperimentCount" -> 5, "ModelUtility" -> 0.6453918911307016, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6706941910689017, 0.0316741691170025], 
                PlusMinus[0.6683604969561919, 0.03047807145683484], 
                PlusMinus[0.6746063485770615, 0.03046722749464643], 
                PlusMinus[0.6578164179190248, 0.02905428889281912], 
                PlusMinus[0.6623075950712436, 0.03004744455475492]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6149793401799384, 0.0630767134376363], 
                PlusMinus[0.5985858975569877, 0.0634953597083141], 
                PlusMinus[0.6149793401799384, 0.0630767134376363], 
                PlusMinus[0.6149793401799384, 0.0630767134376363], 
                PlusMinus[0.6149793401799384, 0.0630767134376363]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 4.780555555555556*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.666497446473893, 0.013881628519046606`], 
             "ModelMemory" -> 8568., "TrainingMemory" -> 87668., 
             "TrainingTime" -> 0.015020083333333333`], "Index" -> 16]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 16], 
        Association["ID" -> 262087653011619]], "MaxTrainingSize" -> 300, 
      "LastReportingTime" -> 3.756198306128074`16.327323501663425*^9, 
      "PreprocessorEvaluationTime" -> 2.435546875`3.*^-6, 
      "PreprocessorMemory" -> 39272, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.6400000000000001, 
          "ElapsedTimes" -> 0.784061, "ExperimentCounts" -> 37], 
         Association[
         "TrainingSizes" -> 50, "TimeBudgets" -> 0.8, "ElapsedTimes" -> 
          0.8490430000000001, "ExperimentCounts" -> 16], 
         Association[
         "TrainingSizes" -> 240, "TimeBudgets" -> 1., "ElapsedTimes" -> 
          0.9946960000000001, "ExperimentCounts" -> 74]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[262096242946211]], "ID" -> 
         262100537913507]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "NumericalVector", "Weight" -> 1, 
           "Values" -> {{-5.842770342931217, -4.298218654376726}}, "ID" -> 
           6900269369450652421]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 3.233027, "MaxTrainingMemory" -> 9275344, 
      "DataMemory" -> 50568, "FunctionMemory" -> 307768, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2019, 1, 11, 12, 25, 6.55819`7.569358982161791}, "Instant", 
        "Gregorian", 2.], "ProcessorCount" -> 10, "ProcessorType" -> "x86-64",
       "OperatingSystem" -> "Unix", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7561911069532967`*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"714bd7e8-78d5-4a76-9cdf-bc4e61b7cb80"]
}, Open  ]],

Cell[CellGroupData[{

Cell["train network", "Section",
 CellChangeTimes->{{3.745480094081863*^9, 
  3.7454800962219143`*^9}},ExpressionUUID->"bf6c5e1e-c568-432c-b2b6-\
a835425b48ed"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"net", "=", 
    RowBox[{"NetInitialize", "@", 
     RowBox[{"NetChain", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"30", ",", "Ramp", ",", "1", ",", "Ramp"}], "}"}], ",", 
       RowBox[{"\"\<Input\>\"", "\[Rule]", "2"}], ",", 
       RowBox[{"\"\<Output\>\"", "\[Rule]", 
        RowBox[{"NetDecoder", "[", "\"\<Scalar\>\"", "]"}]}]}], "]"}]}]}], 
   ",", 
   RowBox[{"net", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], "]"}], ",", 
   RowBox[{"NetInformation", "[", 
    RowBox[{"net", ",", "\"\<MXNetNodeGraphPlot\>\""}], "]"}], ",", 
   RowBox[{"NetInformation", "[", 
    RowBox[{"net", ",", "\"\<SummaryGraphic\>\""}], "]"}], ",", 
   RowBox[{"NetInformation", "[", 
    RowBox[{"net", ",", "\"\<LayersGraph\>\""}], "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.7454801706693277`*^9, 3.7454802010780888`*^9}, {
  3.745480296036124*^9, 3.745480296426462*^9}, {3.7454807886589737`*^9, 
  3.745480917875203*^9}, {3.745481235441371*^9, 3.7454812493349*^9}, {
  3.7454812908713913`*^9, 3.7454812919733152`*^9}, {3.745481390435772*^9, 
  3.745481526868966*^9}, {3.745481577323434*^9, 3.745481697569001*^9}, {
  3.74548176194215*^9, 3.745481805282428*^9}, {3.745481876913582*^9, 
  3.745481935872985*^9}, {3.7454820996736*^9, 3.745482158137239*^9}, {
  3.74548224015482*^9, 3.745482250386677*^9}, {3.7454823183602858`*^9, 
  3.745482381196849*^9}, {3.74548266702811*^9, 3.745482680889443*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"05e86896-846c-4af0-84a7-7746d3b04982"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    TemplateBox[{
      RowBox[{
        StyleBox[
         TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
        StyleBox["[", "NonInterpretableSummary"], 
        DynamicModuleBox[{Typeset`open = False}, 
         PanelBox[
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SquarePlusIconMedium"]], 
                  ButtonFunction :> (Typeset`open = True), Appearance -> None,
                   Evaluator -> Automatic, Method -> "Preemptive"], 
                 Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   RGBColor[0.729, 0.729, 0.729], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   RGBColor[0.729, 0.729, 0.729], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                GridBox[{{
                   StyleBox[
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                   StyleBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    "SummaryItem"]}, {
                   StyleBox[
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                   StyleBox["\"scalar\"", "SummaryItem"]}, {
                   StyleBox[
                    
                    TemplateBox[{"\"Number of layers\"", "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                   StyleBox["4", "SummaryItem"]}}, BaselinePosition -> {2, 1},
                  GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
              GridBoxAlignment -> {"Rows" -> {{Top}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridFrameMargins -> {{0, 0}, {0, 0}}, 
              BaselinePosition -> {1, 3}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SquareMinusIconMedium"]], 
                  ButtonFunction :> (Typeset`open = False), Appearance -> 
                  None, Evaluator -> Automatic, Method -> "Preemptive"], 
                 Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   RGBColor[0.729, 0.729, 0.729], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   RGBColor[0.729, 0.729, 0.729], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                GridBox[{{
                   
                   DynamicModuleBox[{
                    NeuralNetworks`Private`NetChain`assoc3 = 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{30, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{30}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {30}, "$OutputSize" -> 30, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{30}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {30}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{30}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1, 30}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 30, "$InputDimensions" -> {30}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association["Output" -> NetDecoder["Scalar", 
                    Association[], 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    NeuralNetworks`Private`NetChain`opart, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null}, 
                    DynamicBox[
                    GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"30\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"30\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox["\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"scalar\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                    Initialization :> {NetChain}]}}, BaselinePosition -> 
                 Automatic, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
              GridBoxAlignment -> {"Rows" -> {{Top}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridFrameMargins -> {{0, 0}, {0, 0}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
          Baseline, 
          BaseStyle -> {
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False}]], 
        StyleBox["]", "NonInterpretableSummary"]}]},
     "CopyTag",
     DisplayFunction->(#& ),
     InterpretationFunction->("NetChain[<>]"& )],
    False,
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", "0.`", ",", 
   TemplateBox[{
     GraphicsBox[{{
        GrayLevel[0.8], {
         LineBox[{{-6., 3.6739403974420594`*^-16}, {-5., 
          1.0000000000000002`}}], 
         LineBox[{{-6., 1.0000000000000004`}, {-5., 1.0000000000000002`}}], 
         LineBox[{{-6., 2.0000000000000004`}, {-5., 1.0000000000000002`}}], 
         LineBox[{{-5., 1.0000000000000002`}, {-4., 1.0000000000000002`}}], 
         LineBox[{{-4., 1.0000000000000002`}, {-3., 2.}}], 
         LineBox[{{-4., 2.0000000000000004`}, {-3., 2.}}], 
         LineBox[{{-4., 3.0000000000000004`}, {-3., 2.}}], 
         LineBox[{{-3., 2.}, {-1.9999999999999998`, 2.}}], 
         LineBox[{{-1.9999999999999998`, 2.}, {-0.9999999999999999, 2.}}], 
         LineBox[{{-0.9999999999999999, 2.}, {1.2246467991473532`*^-16, 
          2.}}]}}, {
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[
            StyleBox[
             LineBox[{{-1., 1.}, {0., 0.}, {-1., -1.}}], 
             GrayLevel[0.7], StripOnInput -> False]], {-5.4, 
           0.6000000000000002}, {-0.25, 0}, 
           Offset[8], {1., 0.9999999999999999}], 
          
          TemplateBox[{"\[Times]", "\"\[Times]\"", "\"b\"", "2"}, 
           "RowWithSeparators"]], Annotation[#, 
          Row[{"b", 2}, "\[Times]"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[
            StyleBox[
             LineBox[{{-1., 1.}, {0., 0.}, {-1., -1.}}], 
             GrayLevel[0.7], StripOnInput -> False]], {-5.4, 
           1.0000000000000002`}, {-0.25, 0}, 
           Offset[8], {1., -2.220446049250313*^-16}], 
          
          TemplateBox[{"\[Times]", "\"\[Times]\"", "30", "2"}, 
           "RowWithSeparators"]], Annotation[#, 
          Row[{30, 2}, "\[Times]"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[
            StyleBox[
             LineBox[{{-1., 1.}, {0., 0.}, {-1., -1.}}], 
             GrayLevel[0.7], StripOnInput -> False]], {-5.4, 
           1.4000000000000004`}, {-0.25, 0}, 
           Offset[8], {1., -1.0000000000000002`}], 
          
          TemplateBox[{"\[Times]", "\"\[Times]\"", "30"}, 
           "RowWithSeparators"]], Annotation[#, 
          Row[{30}, "\[Times]"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[
            StyleBox[
             LineBox[{{-1., 1.}, {0., 0.}, {-1., -1.}}], 
             GrayLevel[0.7], StripOnInput -> False]], {-4.4, 
           1.0000000000000002`}, {-0.25, 0}, 
           Offset[8], {1., 0.}], 
          
          TemplateBox[{"\[Times]", "\"\[Times]\"", "\"b\"", "30"}, 
           "RowWithSeparators"]], Annotation[#, 
          Row[{"b", 30}, "\[Times]"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[
            StyleBox[
             LineBox[{{-1., 1.}, {0., 0.}, {-1., -1.}}], 
             GrayLevel[0.7], StripOnInput -> False]], {-3.4, 1.6}, {-0.25, 0}, 
           Offset[8], {1., 0.9999999999999998}], 
          
          TemplateBox[{"\[Times]", "\"\[Times]\"", "\"b\"", "30"}, 
           "RowWithSeparators"]], Annotation[#, 
          Row[{"b", 30}, "\[Times]"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[
            StyleBox[
             LineBox[{{-1., 1.}, {0., 0.}, {-1., -1.}}], 
             GrayLevel[0.7], StripOnInput -> False]], {-3.4, 2.}, {-0.25, 0}, 
           
           Offset[8], {1., -4.440892098500626*^-16}], 
          
          TemplateBox[{"\[Times]", "\"\[Times]\"", "1", "30"}, 
           "RowWithSeparators"]], Annotation[#, 
          Row[{1, 30}, "\[Times]"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[
            StyleBox[
             LineBox[{{-1., 1.}, {0., 0.}, {-1., -1.}}], 
             GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
           2.4000000000000004`}, {-0.25, 0}, 
           Offset[8], {1., -1.0000000000000004`}], 
          
          TemplateBox[{"\[Times]", "\"\[Times]\"", "1"}, 
           "RowWithSeparators"]], Annotation[#, 
          Row[{1}, "\[Times]"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[
            StyleBox[
             LineBox[{{-1., 1.}, {0., 0.}, {-1., -1.}}], 
             GrayLevel[0.7], StripOnInput -> False]], {-2.4, 2.}, {-0.25, 0}, 
           
           Offset[8], {1.0000000000000002`, 0.}], 
          
          TemplateBox[{"\[Times]", "\"\[Times]\"", "\"b\"", "1"}, 
           "RowWithSeparators"]], Annotation[#, 
          Row[{"b", 1}, "\[Times]"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[
            StyleBox[
             LineBox[{{-1., 1.}, {0., 0.}, {-1., -1.}}], 
             GrayLevel[0.7], StripOnInput -> False]], {-1.4, 2.}, {-0.25, 0}, 
           
           Offset[8], {0.9999999999999999, 0.}], 
          
          TemplateBox[{"\[Times]", "\"\[Times]\"", "\"b\"", "1"}, 
           "RowWithSeparators"]], Annotation[#, 
          Row[{"b", 1}, "\[Times]"], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[
            StyleBox[
             LineBox[{{-1., 1.}, {0., 0.}, {-1., -1.}}], 
             GrayLevel[0.7], StripOnInput -> False]], {-0.3999999999999999, 
           2.}, {-0.25, 0}, 
           Offset[8], {1., 0.}], 
          
          TemplateBox[{"\[Times]", "\"\[Times]\"", "\"b\"", "1"}, 
           "RowWithSeparators"]], Annotation[#, 
          Row[{"b", 1}, "\[Times]"], "Tooltip"]& ]}, {
        GrayLevel[0], {
         TagBox[
          TooltipBox[{
            AbsolutePointSize[4], 
            GrayLevel[0.5], 
            PointBox[{-6., 3.6739403974420594`*^-16}]}, 
           TagBox[
            GridBox[{{
               StyleBox["\"id\"", Bold, StripOnInput -> False], "0"}, {
               StyleBox["\"name\"", Bold, StripOnInput -> False], 
               "\".Inputs.Input\""}, {
               StyleBox["\"op\"", Bold, StripOnInput -> False], "\"null\""}, {
              
               StyleBox["\"param\"", Bold, StripOnInput -> False], 
               RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, {
               StyleBox["\"attrs\"", Bold, StripOnInput -> False], 
               RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, {
               StyleBox["\"inputs\"", Bold, StripOnInput -> False], 
               RowBox[{"{", "}"}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False,
              GridBoxDividers -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{1.4}}}, 
             GridBoxSpacings -> {"Columns" -> {{1.1}}, "Rows" -> {{0.5}}}, 
             BaseStyle -> {FontFamily -> "Source Code Pro"}, FrameStyle -> 
             GrayLevel[0.85]], "Grid"]], Annotation[#, 
           Grid[{{
              Style["id", Bold], 0}, {
              Style["name", Bold], ".Inputs.Input"}, {
              Style["op", Bold], "null"}, {
              Style["param", Bold], 
              Association[]}, {
              Style["attrs", Bold], 
              Association[]}, {
              Style["inputs", Bold], {}}}, Alignment -> Left, 
            BaseStyle -> {FontFamily -> "Source Code Pro"}, Dividers -> All, 
            FrameStyle -> GrayLevel[0.85], Alignment -> {Left, Baseline}, 
            Spacings -> {1.1, 0.5}, ItemSize -> {Automatic, 1.4}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[{
            AbsolutePointSize[4], 
            GrayLevel[0.5], 
            PointBox[{-6., 1.0000000000000004`}]}, 
           TagBox[
            GridBox[{{
               StyleBox["\"id\"", Bold, StripOnInput -> False], "1"}, {
               StyleBox["\"name\"", Bold, StripOnInput -> False], 
               "\".Nodes.1.Arrays.Weights\""}, {
               StyleBox["\"op\"", Bold, StripOnInput -> False], "\"null\""}, {
              
               StyleBox["\"param\"", Bold, StripOnInput -> False], 
               RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, {
               StyleBox["\"attrs\"", Bold, StripOnInput -> False], 
               RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, {
               StyleBox["\"inputs\"", Bold, StripOnInput -> False], 
               RowBox[{"{", "}"}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False,
              GridBoxDividers -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{1.4}}}, 
             GridBoxSpacings -> {"Columns" -> {{1.1}}, "Rows" -> {{0.5}}}, 
             BaseStyle -> {FontFamily -> "Source Code Pro"}, FrameStyle -> 
             GrayLevel[0.85]], "Grid"]], Annotation[#, 
           Grid[{{
              Style["id", Bold], 1}, {
              Style["name", Bold], ".Nodes.1.Arrays.Weights"}, {
              Style["op", Bold], "null"}, {
              Style["param", Bold], 
              Association[]}, {
              Style["attrs", Bold], 
              Association[]}, {
              Style["inputs", Bold], {}}}, Alignment -> Left, 
            BaseStyle -> {FontFamily -> "Source Code Pro"}, Dividers -> All, 
            FrameStyle -> GrayLevel[0.85], Alignment -> {Left, Baseline}, 
            Spacings -> {1.1, 0.5}, ItemSize -> {Automatic, 1.4}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[{
            AbsolutePointSize[4], 
            GrayLevel[0.5], 
            PointBox[{-6., 2.0000000000000004`}]}, 
           TagBox[
            GridBox[{{
               StyleBox["\"id\"", Bold, StripOnInput -> False], "2"}, {
               StyleBox["\"name\"", Bold, StripOnInput -> False], 
               "\".Nodes.1.Arrays.Biases\""}, {
               StyleBox["\"op\"", Bold, StripOnInput -> False], "\"null\""}, {
              
               StyleBox["\"param\"", Bold, StripOnInput -> False], 
               RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, {
               StyleBox["\"attrs\"", Bold, StripOnInput -> False], 
               RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, {
               StyleBox["\"inputs\"", Bold, StripOnInput -> False], 
               RowBox[{"{", "}"}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False,
              GridBoxDividers -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{1.4}}}, 
             GridBoxSpacings -> {"Columns" -> {{1.1}}, "Rows" -> {{0.5}}}, 
             BaseStyle -> {FontFamily -> "Source Code Pro"}, FrameStyle -> 
             GrayLevel[0.85]], "Grid"]], Annotation[#, 
           Grid[{{
              Style["id", Bold], 2}, {
              Style["name", Bold], ".Nodes.1.Arrays.Biases"}, {
              Style["op", Bold], "null"}, {
              Style["param", Bold], 
              Association[]}, {
              Style["attrs", Bold], 
              Association[]}, {
              Style["inputs", Bold], {}}}, Alignment -> Left, 
            BaseStyle -> {FontFamily -> "Source Code Pro"}, Dividers -> All, 
            FrameStyle -> GrayLevel[0.85], Alignment -> {Left, Baseline}, 
            Spacings -> {1.1, 0.5}, ItemSize -> {Automatic, 1.4}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[{
            AbsolutePointSize[6], 
            GrayLevel[0], 
            PointBox[{-5., 1.0000000000000002`}]}, 
           TagBox[
            GridBox[{{
               StyleBox["\"id\"", Bold, StripOnInput -> False], "3"}, {
               StyleBox["\"name\"", Bold, StripOnInput -> False], 
               "\".Nodes.1\""}, {
               StyleBox["\"op\"", Bold, StripOnInput -> False], 
               "\"FullyConnected\""}, {
               StyleBox["\"param\"", Bold, StripOnInput -> False], 
               RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, {
               StyleBox["\"attrs\"", Bold, StripOnInput -> False], 
               TagBox[
                GridBox[{{
                   StyleBox["\"no_bias\"", Bold, StripOnInput -> False], 
                   StyleBox[
                   "\"False\"", ShowStringCharacters -> True, StripOnInput -> 
                    False]}, {
                   StyleBox["\"num_hidden\"", Bold, StripOnInput -> False], 
                   StyleBox[
                   "\"30\"", ShowStringCharacters -> True, StripOnInput -> 
                    False]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {False, {True}, False}, 
                   "Rows" -> {False, {True}, False}}, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {"Columns" -> {{1.1}}, "Rows" -> {{0.5}}},
                  FrameStyle -> GrayLevel[0.85]], "Grid"]}, {
               StyleBox["\"inputs\"", Bold, StripOnInput -> False], 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"2", ",", "0", ",", "0"}], "}"}]}], "}"}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False,
              GridBoxDividers -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{1.4}}}, 
             GridBoxSpacings -> {"Columns" -> {{1.1}}, "Rows" -> {{0.5}}}, 
             BaseStyle -> {FontFamily -> "Source Code Pro"}, FrameStyle -> 
             GrayLevel[0.85]], "Grid"]], Annotation[#, 
           Grid[{{
              Style["id", Bold], 3}, {
              Style["name", Bold], ".Nodes.1"}, {
              Style["op", Bold], "FullyConnected"}, {
              Style["param", Bold], 
              Association[]}, {
              Style["attrs", Bold], 
              Grid[{{
                 Style["no_bias", Bold], 
                 Style["False", ShowStringCharacters -> True]}, {
                 Style["num_hidden", Bold], 
                 Style["30", ShowStringCharacters -> True]}}, Alignment -> 
               Left, Spacings -> {1.1, 0.5}, Dividers -> Center, FrameStyle -> 
               GrayLevel[0.85]]}, {
              Style["inputs", Bold], {{0, 0, 0}, {1, 0, 0}, {2, 0, 0}}}}, 
            Alignment -> Left, BaseStyle -> {FontFamily -> "Source Code Pro"},
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
            Alignment -> {Left, Baseline}, Spacings -> {1.1, 0.5}, 
            ItemSize -> {Automatic, 1.4}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[{
            AbsolutePointSize[6], 
            Hue[0.08, 1, 0.92], 
            PointBox[{-4., 1.0000000000000002`}]}, 
           TagBox[
            GridBox[{{
               StyleBox["\"id\"", Bold, StripOnInput -> False], "4"}, {
               StyleBox["\"name\"", Bold, StripOnInput -> False], 
               "\".Nodes.2$0\""}, {
               StyleBox["\"op\"", Bold, StripOnInput -> False], "\"relu\""}, {
              
               StyleBox["\"param\"", Bold, StripOnInput -> False], 
               RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, {
               StyleBox["\"attrs\"", Bold, StripOnInput -> False], 
               RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, {
               StyleBox["\"inputs\"", Bold, StripOnInput -> False], 
               RowBox[{"{", 
                 RowBox[{"{", 
                   RowBox[{"3", ",", "0", ",", "0"}], "}"}], "}"}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False,
              GridBoxDividers -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{1.4}}}, 
             GridBoxSpacings -> {"Columns" -> {{1.1}}, "Rows" -> {{0.5}}}, 
             BaseStyle -> {FontFamily -> "Source Code Pro"}, FrameStyle -> 
             GrayLevel[0.85]], "Grid"]], Annotation[#, 
           Grid[{{
              Style["id", Bold], 4}, {
              Style["name", Bold], ".Nodes.2$0"}, {
              Style["op", Bold], "relu"}, {
              Style["param", Bold], 
              Association[]}, {
              Style["attrs", Bold], 
              Association[]}, {
              Style["inputs", Bold], {{3, 0, 0}}}}, Alignment -> Left, 
            BaseStyle -> {FontFamily -> "Source Code Pro"}, Dividers -> All, 
            FrameStyle -> GrayLevel[0.85], Alignment -> {Left, Baseline}, 
            Spacings -> {1.1, 0.5}, ItemSize -> {Automatic, 1.4}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[{
            AbsolutePointSize[4], 
            GrayLevel[0.5], 
            PointBox[{-4., 2.0000000000000004`}]}, 
           TagBox[
            GridBox[{{
               StyleBox["\"id\"", Bold, StripOnInput -> False], "5"}, {
               StyleBox["\"name\"", Bold, StripOnInput -> False], 
               "\".Nodes.3.Arrays.Weights\""}, {
               StyleBox["\"op\"", Bold, StripOnInput -> False], "\"null\""}, {
              
               StyleBox["\"param\"", Bold, StripOnInput -> False], 
               RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, {
               StyleBox["\"attrs\"", Bold, StripOnInput -> False], 
               RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, {
               StyleBox["\"inputs\"", Bold, StripOnInput -> False], 
               RowBox[{"{", "}"}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False,
              GridBoxDividers -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{1.4}}}, 
             GridBoxSpacings -> {"Columns" -> {{1.1}}, "Rows" -> {{0.5}}}, 
             BaseStyle -> {FontFamily -> "Source Code Pro"}, FrameStyle -> 
             GrayLevel[0.85]], "Grid"]], Annotation[#, 
           Grid[{{
              Style["id", Bold], 5}, {
              Style["name", Bold], ".Nodes.3.Arrays.Weights"}, {
              Style["op", Bold], "null"}, {
              Style["param", Bold], 
              Association[]}, {
              Style["attrs", Bold], 
              Association[]}, {
              Style["inputs", Bold], {}}}, Alignment -> Left, 
            BaseStyle -> {FontFamily -> "Source Code Pro"}, Dividers -> All, 
            FrameStyle -> GrayLevel[0.85], Alignment -> {Left, Baseline}, 
            Spacings -> {1.1, 0.5}, ItemSize -> {Automatic, 1.4}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[{
            AbsolutePointSize[4], 
            GrayLevel[0.5], 
            PointBox[{-4., 3.0000000000000004`}]}, 
           TagBox[
            GridBox[{{
               StyleBox["\"id\"", Bold, StripOnInput -> False], "6"}, {
               StyleBox["\"name\"", Bold, StripOnInput -> False], 
               "\".Nodes.3.Arrays.Biases\""}, {
               StyleBox["\"op\"", Bold, StripOnInput -> False], "\"null\""}, {
              
               StyleBox["\"param\"", Bold, StripOnInput -> False], 
               RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, {
               StyleBox["\"attrs\"", Bold, StripOnInput -> False], 
               RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, {
               StyleBox["\"inputs\"", Bold, StripOnInput -> False], 
               RowBox[{"{", "}"}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False,
              GridBoxDividers -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{1.4}}}, 
             GridBoxSpacings -> {"Columns" -> {{1.1}}, "Rows" -> {{0.5}}}, 
             BaseStyle -> {FontFamily -> "Source Code Pro"}, FrameStyle -> 
             GrayLevel[0.85]], "Grid"]], Annotation[#, 
           Grid[{{
              Style["id", Bold], 6}, {
              Style["name", Bold], ".Nodes.3.Arrays.Biases"}, {
              Style["op", Bold], "null"}, {
              Style["param", Bold], 
              Association[]}, {
              Style["attrs", Bold], 
              Association[]}, {
              Style["inputs", Bold], {}}}, Alignment -> Left, 
            BaseStyle -> {FontFamily -> "Source Code Pro"}, Dividers -> All, 
            FrameStyle -> GrayLevel[0.85], Alignment -> {Left, Baseline}, 
            Spacings -> {1.1, 0.5}, ItemSize -> {Automatic, 1.4}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[{
            AbsolutePointSize[6], 
            GrayLevel[0], 
            PointBox[{-3., 2.}]}, 
           TagBox[
            GridBox[{{
               StyleBox["\"id\"", Bold, StripOnInput -> False], "7"}, {
               StyleBox["\"name\"", Bold, StripOnInput -> False], 
               "\".Nodes.3\""}, {
               StyleBox["\"op\"", Bold, StripOnInput -> False], 
               "\"FullyConnected\""}, {
               StyleBox["\"param\"", Bold, StripOnInput -> False], 
               RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, {
               StyleBox["\"attrs\"", Bold, StripOnInput -> False], 
               TagBox[
                GridBox[{{
                   StyleBox["\"no_bias\"", Bold, StripOnInput -> False], 
                   StyleBox[
                   "\"False\"", ShowStringCharacters -> True, StripOnInput -> 
                    False]}, {
                   StyleBox["\"num_hidden\"", Bold, StripOnInput -> False], 
                   StyleBox[
                   "\"1\"", ShowStringCharacters -> True, StripOnInput -> 
                    False]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {False, {True}, False}, 
                   "Rows" -> {False, {True}, False}}, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {"Columns" -> {{1.1}}, "Rows" -> {{0.5}}},
                  FrameStyle -> GrayLevel[0.85]], "Grid"]}, {
               StyleBox["\"inputs\"", Bold, StripOnInput -> False], 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"4", ",", "0", ",", "0"}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"5", ",", "0", ",", "0"}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"6", ",", "0", ",", "0"}], "}"}]}], "}"}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False,
              GridBoxDividers -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{1.4}}}, 
             GridBoxSpacings -> {"Columns" -> {{1.1}}, "Rows" -> {{0.5}}}, 
             BaseStyle -> {FontFamily -> "Source Code Pro"}, FrameStyle -> 
             GrayLevel[0.85]], "Grid"]], Annotation[#, 
           Grid[{{
              Style["id", Bold], 7}, {
              Style["name", Bold], ".Nodes.3"}, {
              Style["op", Bold], "FullyConnected"}, {
              Style["param", Bold], 
              Association[]}, {
              Style["attrs", Bold], 
              Grid[{{
                 Style["no_bias", Bold], 
                 Style["False", ShowStringCharacters -> True]}, {
                 Style["num_hidden", Bold], 
                 Style["1", ShowStringCharacters -> True]}}, Alignment -> 
               Left, Spacings -> {1.1, 0.5}, Dividers -> Center, FrameStyle -> 
               GrayLevel[0.85]]}, {
              Style["inputs", Bold], {{4, 0, 0}, {5, 0, 0}, {6, 0, 0}}}}, 
            Alignment -> Left, BaseStyle -> {FontFamily -> "Source Code Pro"},
             Dividers -> All, FrameStyle -> GrayLevel[0.85], 
            Alignment -> {Left, Baseline}, Spacings -> {1.1, 0.5}, 
            ItemSize -> {Automatic, 1.4}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[{
            AbsolutePointSize[6], 
            Hue[0.08, 1, 0.92], 
            PointBox[{-1.9999999999999998`, 2.}]}, 
           TagBox[
            GridBox[{{
               StyleBox["\"id\"", Bold, StripOnInput -> False], "8"}, {
               StyleBox["\"name\"", Bold, StripOnInput -> False], 
               "\".Nodes.4$0\""}, {
               StyleBox["\"op\"", Bold, StripOnInput -> False], "\"relu\""}, {
              
               StyleBox["\"param\"", Bold, StripOnInput -> False], 
               RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, {
               StyleBox["\"attrs\"", Bold, StripOnInput -> False], 
               RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, {
               StyleBox["\"inputs\"", Bold, StripOnInput -> False], 
               RowBox[{"{", 
                 RowBox[{"{", 
                   RowBox[{"7", ",", "0", ",", "0"}], "}"}], "}"}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False,
              GridBoxDividers -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{1.4}}}, 
             GridBoxSpacings -> {"Columns" -> {{1.1}}, "Rows" -> {{0.5}}}, 
             BaseStyle -> {FontFamily -> "Source Code Pro"}, FrameStyle -> 
             GrayLevel[0.85]], "Grid"]], Annotation[#, 
           Grid[{{
              Style["id", Bold], 8}, {
              Style["name", Bold], ".Nodes.4$0"}, {
              Style["op", Bold], "relu"}, {
              Style["param", Bold], 
              Association[]}, {
              Style["attrs", Bold], 
              Association[]}, {
              Style["inputs", Bold], {{7, 0, 0}}}}, Alignment -> Left, 
            BaseStyle -> {FontFamily -> "Source Code Pro"}, Dividers -> All, 
            FrameStyle -> GrayLevel[0.85], Alignment -> {Left, Baseline}, 
            Spacings -> {1.1, 0.5}, ItemSize -> {Automatic, 1.4}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[{
            AbsolutePointSize[6], 
            Hue[0.11, 1, 0.75], 
            PointBox[{-0.9999999999999999, 2.}]}, 
           TagBox[
            GridBox[{{
               StyleBox["\"id\"", Bold, StripOnInput -> False], "9"}, {
               StyleBox["\"name\"", Bold, StripOnInput -> False], 
               "\".Outputs.Output\""}, {
               StyleBox["\"op\"", Bold, StripOnInput -> False], "\"_copy\""}, {
               StyleBox["\"param\"", Bold, StripOnInput -> False], 
               RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, {
               StyleBox["\"attrs\"", Bold, StripOnInput -> False], 
               RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}, {
               StyleBox["\"inputs\"", Bold, StripOnInput -> False], 
               RowBox[{"{", 
                 RowBox[{"{", 
                   RowBox[{"8", ",", "0", ",", "0"}], "}"}], "}"}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False,
              GridBoxDividers -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{1.4}}}, 
             GridBoxSpacings -> {"Columns" -> {{1.1}}, "Rows" -> {{0.5}}}, 
             BaseStyle -> {FontFamily -> "Source Code Pro"}, FrameStyle -> 
             GrayLevel[0.85]], "Grid"]], Annotation[#, 
           Grid[{{
              Style["id", Bold], 9}, {
              Style["name", Bold], ".Outputs.Output"}, {
              Style["op", Bold], "_copy"}, {
              Style["param", Bold], 
              Association[]}, {
              Style["attrs", Bold], 
              Association[]}, {
              Style["inputs", Bold], {{8, 0, 0}}}}, Alignment -> Left, 
            BaseStyle -> {FontFamily -> "Source Code Pro"}, Dividers -> All, 
            FrameStyle -> GrayLevel[0.85], Alignment -> {Left, Baseline}, 
            Spacings -> {1.1, 0.5}, ItemSize -> {Automatic, 1.4}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[{
            AbsolutePointSize[4], 
            GrayLevel[0.5], 
            PointBox[{1.2246467991473532`*^-16, 2.}]}, "Null"], 
          Annotation[#, Null, "Tooltip"]& ]}}, 
       StyleBox[{{{
           InsetBox[
            FormBox["0", TraditionalForm], 
            Offset[{0, 5}, {-6., 3.6739403974420594`*^-16}], {0., -0.17}, 
            Automatic, {1, 0}], 
           InsetBox[
            FormBox["1", TraditionalForm], 
            Offset[{0, 5}, {-6., 1.0000000000000004`}], {0., -0.17}, 
            Automatic, {1, 0}], 
           InsetBox[
            FormBox["2", TraditionalForm], 
            Offset[{0, 5}, {-6., 2.0000000000000004`}], {0., -0.17}, 
            Automatic, {1, 0}], 
           InsetBox[
            FormBox["3", TraditionalForm], 
            Offset[{0, 6}, {-5., 1.0000000000000002`}], {0., -0.17}, 
            Automatic, {1, 0}], 
           InsetBox[
            FormBox["4", TraditionalForm], 
            Offset[{0, 6}, {-4., 1.0000000000000002`}], {0., -0.17}, 
            Automatic, {1, 0}], 
           InsetBox[
            FormBox["5", TraditionalForm], 
            Offset[{0, 5}, {-4., 2.0000000000000004`}], {0., -0.17}, 
            Automatic, {1, 0}], 
           InsetBox[
            FormBox["6", TraditionalForm], 
            Offset[{0, 5}, {-4., 3.0000000000000004`}], {0., -0.17}, 
            Automatic, {1, 0}], 
           InsetBox[
            FormBox["7", TraditionalForm], 
            Offset[{0, 6}, {-3., 2.}], {0., -0.17}, Automatic, {1, 0}], 
           InsetBox[
            FormBox["8", TraditionalForm], 
            Offset[{0, 6}, {-1.9999999999999998`, 2.}], {0., -0.17}, 
            Automatic, {1, 0}], 
           InsetBox[
            FormBox["9", TraditionalForm], 
            Offset[{0, 6}, {-0.9999999999999999, 2.}], {0., -0.17}, 
            Automatic, {1, 0}], 
           InsetBox[
            FormBox["\"\"", TraditionalForm], 
            Offset[{0, 5}, {1.2246467991473532`*^-16, 2.}], {0., -0.17}, 
            Automatic, {1, 0}]}, {
           InsetBox[
            FormBox["\"\"", TraditionalForm], 
            Offset[{0, -5}, {-6., 3.6739403974420594`*^-16}], {0, 1.}, 
            Automatic, {1, 0}], 
           InsetBox[
            FormBox["\"\"", TraditionalForm], 
            Offset[{0, -5}, {-6., 1.0000000000000004`}], {0, 1.}, Automatic, {
            1, 0}], 
           InsetBox[
            FormBox["\"\"", TraditionalForm], 
            Offset[{0, -5}, {-6., 2.0000000000000004`}], {0, 1.}, Automatic, {
            1, 0}], 
           InsetBox[
            FormBox["\"FC\"", TraditionalForm], 
            Offset[{0, -6}, {-5., 1.0000000000000002`}], {0, 1.}, Automatic, {
            1, 0}], 
           InsetBox[
            FormBox["\"r\"", TraditionalForm], 
            Offset[{0, -6}, {-4., 1.0000000000000002`}], {0, 1.}, Automatic, {
            1, 0}], 
           InsetBox[
            FormBox["\"\"", TraditionalForm], 
            Offset[{0, -5}, {-4., 2.0000000000000004`}], {0, 1.}, Automatic, {
            1, 0}], 
           InsetBox[
            FormBox["\"\"", TraditionalForm], 
            Offset[{0, -5}, {-4., 3.0000000000000004`}], {0, 1.}, Automatic, {
            1, 0}], 
           InsetBox[
            FormBox["\"FC\"", TraditionalForm], 
            Offset[{0, -6}, {-3., 2.}], {0, 1.}, Automatic, {1, 0}], 
           InsetBox[
            FormBox["\"r\"", TraditionalForm], 
            Offset[{0, -6}, {-1.9999999999999998`, 2.}], {0, 1.}, Automatic, {
            1, 0}], 
           InsetBox[
            FormBox["\"c\"", TraditionalForm], 
            Offset[{0, -6}, {-0.9999999999999999, 2.}], {0, 1.}, Automatic, {
            1, 0}], 
           InsetBox[
            FormBox["\"\"", TraditionalForm], 
            Offset[{0, -5}, {1.2246467991473532`*^-16, 2.}], {0, 1.}, 
            Automatic, {1, 0}]}}}, FontSize -> 7, StripOnInput -> False]}, 
      ImageSize -> {270., 145.85}, AspectRatio -> Full, PlotRangePadding -> 0,
       ImagePadding -> {{23.999999999999986`, 6}, {15.000000000000002`, 
        10.84999999999999}}, ImageMargins -> 0, 
      BaseStyle -> {TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
     FormBox[
      FormBox[
       TemplateBox[{
        "\"Tensor\"", "\"FullyConnected\"", "\"relu\"", "\"_copy\""}, 
        "PointLegend", DisplayFunction -> (FormBox[
          StyleBox[
           StyleBox[
            PaneBox[
             TagBox[
              GridBox[{{
                 TemplateBox[{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.5], 
                    AbsolutePointSize[4]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.5], 
                    AbsolutePointSize[4]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.23333333333333334`] -> 
                    Baseline)], "\" \"", #}, "RowDefault"], 
                 TemplateBox[{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0], 
                    AbsolutePointSize[6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0], 
                    AbsolutePointSize[6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.23333333333333334`] -> 
                    Baseline)], "\" \"", #2}, "RowDefault"], 
                 TemplateBox[{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.08, 1, 0.92], 
                    AbsolutePointSize[6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.08, 1, 0.92], 
                    AbsolutePointSize[6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.23333333333333334`] -> 
                    Baseline)], "\" \"", #3}, "RowDefault"], 
                 TemplateBox[{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.11, 1, 0.75], 
                    AbsolutePointSize[6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.11, 1, 0.75], 
                    AbsolutePointSize[6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.23333333333333334`] -> 
                    Baseline)], "\" \"", #4}, "RowDefault"], "\"\""}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Grid"], Alignment -> Left, AppearanceElements -> None, 
             ImageMargins -> {{2, 2}, {2, 2}}, ImageSizeAction -> 
             "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
           FontSize -> 8, FontFamily -> "Arial"}, Background -> Automatic, 
           StripOnInput -> False], TraditionalForm]& ), 
        InterpretationFunction :> (RowBox[{"PointLegend", "[", 
           RowBox[{
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"AbsolutePointSize", "[", "4", "]"}]}], "]"}], 
                 ",", 
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0], Editable -> False, Selectable -> False], 
                    ",", 
                    RowBox[{"AbsolutePointSize", "[", "6", "]"}]}], "]"}], 
                 ",", 
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    Hue[0.08, 1, 0.92], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    Hue[0.07999999999999999, 1., 0.6133333333333334], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"Hue", "[", 
                    RowBox[{"0.08`", ",", "1", ",", "0.92`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    Hue[0.08, 1, 0.92]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["HueColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    Hue[0.08, 1, 0.92], Editable -> False, Selectable -> 
                    False], ",", 
                    RowBox[{"AbsolutePointSize", "[", "6", "]"}]}], "]"}], 
                 ",", 
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    Hue[0.11, 1, 0.75], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> Hue[0.11, 1., 0.5], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"Hue", "[", 
                    RowBox[{"0.11`", ",", "1", ",", "0.75`"}], "]"}], 
                    NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    Hue[0.11, 1, 0.75]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["HueColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    Hue[0.11, 1, 0.75], Editable -> False, Selectable -> 
                    False], ",", 
                    RowBox[{"AbsolutePointSize", "[", "6", "]"}]}], "]"}]}], 
               "}"}], ",", 
             RowBox[{"{", 
               RowBox[{#, ",", #2, ",", #3, ",", #4}], "}"}], ",", 
             RowBox[{"LabelStyle", "\[Rule]", "8"}], ",", 
             RowBox[{"LegendMarkerSize", "\[Rule]", "12"}], ",", 
             RowBox[{"LegendMargins", "\[Rule]", "2"}], ",", 
             
             RowBox[{"LegendLayout", "\[Rule]", 
               "GeneralUtilities`Graphics`PackagePrivate`legendTable"}]}], 
           "]"}]& ), Editable -> True], TraditionalForm], TraditionalForm]},
    "Legended",
    DisplayFunction->(GridBox[{{
        TagBox[
         ItemBox[
          PaneBox[
           TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
           BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
         "SkipImageSizeLevel"]}, {
        ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
      GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
      AutoDelete -> False, GridBoxItemSize -> Automatic, 
      BaselinePosition -> {1, 1}]& ),
    Editable->True,
    InterpretationFunction->(RowBox[{"Legended", "[", 
       RowBox[{#, ",", 
         RowBox[{"Placed", "[", 
           RowBox[{#2, ",", "Below"}], "]"}]}], "]"}]& )], ",", 
   GraphicsBox[{
     {GrayLevel[0.7], 
      LineBox[{{-5., 3.061616997868383*^-16}, {-4., 
       2.4492935982947064`*^-16}}], 
      LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 
       1.8369701987210297`*^-16}}], 
      LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
       1.2246467991473532`*^-16}}], 
      LineBox[{{-2., 1.2246467991473532`*^-16}, {-1., 
       6.123233995736766*^-17}}], 
      LineBox[{{-1., 6.123233995736766*^-17}, {0., 0.}}]}, {InsetBox[
       GraphicsBox[
        {GrayLevel[0.7], 
         PolygonBox[{{-1., 0.3333333333333333}, {0., 
          0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 0.}, {-1., 
          0.3333333333333333}}]}], {-4.4, 2.694222958124177*^-16}, {-0.25, 0},
        Offset[8], {1., -6.123233995736767*^-17}], InsetBox[
       GraphicsBox[
        {GrayLevel[0.7], 
         PolygonBox[{{-1., 0.3333333333333333}, {0., 
          0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 0.}, {-1., 
          0.3333333333333333}}]}], {-3.4, 2.0818995585505003*^-16}, {-0.25, 0},
        Offset[8], {1., -6.123233995736767*^-17}], InsetBox[
       GraphicsBox[
        {GrayLevel[0.7], 
         PolygonBox[{{-1., 0.3333333333333333}, {0., 
          0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 0.}, {-1., 
          0.3333333333333333}}]}], \
{-2.4000000000000004, 1.4695761589768238*^-16}, {-0.25, 0}, Offset[8], {
       1., -6.123233995736765*^-17}], InsetBox[
       GraphicsBox[
        {GrayLevel[0.7], 
         PolygonBox[{{-1., 0.3333333333333333}, {0., 
          0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 0.}, {-1., 
          0.3333333333333333}}]}], {-1.4, 8.572527594031473*^-17}, {-0.25, 0},
        Offset[8], {1., -6.123233995736766*^-17}], InsetBox[
       GraphicsBox[
        {GrayLevel[0.7], 
         PolygonBox[{{-1., 0.3333333333333333}, {0., 
          0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 0.}, {-1., 
          0.3333333333333333}}]}], {-0.4, 2.4492935982947065*^-17}, {-0.25, 0},
        Offset[8], {1., -6.123233995736766*^-17}]}, 
     {EdgeForm[AbsoluteThickness[1]], 
      StyleBox[{
        {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
         DiskBox[{-5., 3.061616997868383*^-16}, Offset[{2., 2.}, {0., 0.}]]}, {
         {EdgeForm[GrayLevel[0.7]], FaceForm[RGBColor[
          0.7999999999999999, 0.7999999999999999, 0.7999999999999999]], 
          RectangleBox[Offset[{-10, -10}, {-4., 2.4492935982947064*^-16}], 
           Offset[{10, 10}, {-4., 2.4492935982947064*^-16}]]}, InsetBox[
          
          GraphicsBox[
           GraphicsComplexBox[{{0.1, 0}, {-0.3, 1}, {0.5, 1}, {1.3, 1}, {
             0.9, 0}}, {
             {Opacity[0.2], 
              LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 4}}]}, 
             {RGBColor[0.33, 0.33, 0.33], AbsolutePointSize[3.5], 
              PointBox[{1, 5, 2, 3, 4}]}}],
           ImageSize->18], {-4., 2.4492935982947064*^-16}]}, {
         {EdgeForm[GrayLevel[0.85]], FaceForm[RGBColor[0.9, 0.9, 0.9]], 
          RectangleBox[Offset[{-10, -10}, {-3., 1.8369701987210297*^-16}], 
           Offset[{10, 10}, {-3., 1.8369701987210297*^-16}]]}, InsetBox[
          FormBox[
           GraphicsBox[
            TagBox[RasterBox[CompressedData["
1:eJzN1csrRFEcwPHLICHZEJqNSOwUCxkbG5OkxshSmjvn/O4YGTVIUpoNf4NZ
idR97FAeKztKNtakLClsiPIYv3vn4HgO5tx7fetMzSymzz3N7zc18mgQciVJ
GivEl2BosiMeD031leGb/tjYkBKjpCs2ThUab5U9+GEVngY8eZIt9WT7BQBr
RUDUHRGYT8rKl0hs5wHVV4BqKVGgd2XhS+Wga9604bkUR3rTn30A2jSz3QIY
7SJRXH/yAeiDzPaoEC0oGsX1ax+luh9dd5aPqMN2oLh+5SPEaEbXlWlTqDpn
F4rrxz78vdXirJ6aNkq1RXM+7ISxfuQLhYxydB2m703bBEjm2w1jZfSZ+xdN
u2weDkZGlkudgLG+9Vn7F7RVZjuRZbXaKRjrGx/uX9CSzHZBiNboHOulL304
AzPMdhMJ6z4nUVyf+vDeCLM9UKr2Oo3i+uADULvRdc/2SNQNFNcbn6KoLei6
tu4O9Fm3UFwvvnDYqEPXGdtxCw7t30xZvkhkqQJdR+n/VH3Dwf2bqZ6BgaVi
dO2xe9uPRo0St1HPeTwFATStsVk9Rlul26bXUjk+n7zFbOc4q/Vui/hwjyT8
/glr/+KOaxPynelnFXb8nROPuEcCImxm5vOKPF5v07qUnmER59/3BFS5M6o=

              "], {{0, 25}, {40, 0}}, {0, 255},
              ColorFunction->RGBColor],
             BoxForm`ImageTag[
             "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
              Interleaving -> True, Magnification -> Automatic],
             Selectable->False],
            DefaultBaseStyle->"ImageGraphics",
            ImageSize->20,
            ImageSizeRaw->{40, 25},
            PlotRange->{{0, 40}, {0, 25}}],
           TraditionalForm], {-3., 1.8369701987210297*^-16}]}, {
         {EdgeForm[GrayLevel[0.7]], FaceForm[RGBColor[
          0.7999999999999999, 0.7999999999999999, 0.7999999999999999]], 
          RectangleBox[Offset[{-10, -10}, {-2., 1.2246467991473532*^-16}], 
           Offset[{10, 10}, {-2., 1.2246467991473532*^-16}]]}, InsetBox[
          
          GraphicsBox[
           GraphicsComplexBox[{{0.1, 0}, {-0.3, 1}, {0.5, 1}, {1.3, 1}, {
             0.9, 0}}, {
             {Opacity[0.2], 
              LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 4}}]}, 
             {RGBColor[0.33, 0.33, 0.33], AbsolutePointSize[3.5], 
              PointBox[{1, 5, 2, 3, 4}]}}],
           ImageSize->18], {-2., 1.2246467991473532*^-16}]}, {
         {EdgeForm[GrayLevel[0.85]], FaceForm[RGBColor[0.9, 0.9, 0.9]], 
          RectangleBox[Offset[{-10, -10}, {-1., 6.123233995736766*^-17}], 
           Offset[{10, 10}, {-1., 6.123233995736766*^-17}]]}, InsetBox[
          FormBox[
           GraphicsBox[
            TagBox[RasterBox[CompressedData["
1:eJzN1csrRFEcwPHLICHZEJqNSOwUCxkbG5OkxshSmjvn/O4YGTVIUpoNf4NZ
idR97FAeKztKNtakLClsiPIYv3vn4HgO5tx7fetMzSymzz3N7zc18mgQciVJ
GivEl2BosiMeD031leGb/tjYkBKjpCs2ThUab5U9+GEVngY8eZIt9WT7BQBr
RUDUHRGYT8rKl0hs5wHVV4BqKVGgd2XhS+Wga9604bkUR3rTn30A2jSz3QIY
7SJRXH/yAeiDzPaoEC0oGsX1ax+luh9dd5aPqMN2oLh+5SPEaEbXlWlTqDpn
F4rrxz78vdXirJ6aNkq1RXM+7ISxfuQLhYxydB2m703bBEjm2w1jZfSZ+xdN
u2weDkZGlkudgLG+9Vn7F7RVZjuRZbXaKRjrGx/uX9CSzHZBiNboHOulL304
AzPMdhMJ6z4nUVyf+vDeCLM9UKr2Oo3i+uADULvRdc/2SNQNFNcbn6KoLei6
tu4O9Fm3UFwvvnDYqEPXGdtxCw7t30xZvkhkqQJdR+n/VH3Dwf2bqZ6BgaVi
dO2xe9uPRo0St1HPeTwFATStsVk9Rlul26bXUjk+n7zFbOc4q/Vui/hwjyT8
/glr/+KOaxPynelnFXb8nROPuEcCImxm5vOKPF5v07qUnmER59/3BFS5M6o=

              "], {{0, 25}, {40, 0}}, {0, 255},
              ColorFunction->RGBColor],
             BoxForm`ImageTag[
             "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
              Interleaving -> True, Magnification -> Automatic],
             Selectable->False],
            DefaultBaseStyle->"ImageGraphics",
            ImageSize->20,
            ImageSizeRaw->{40, 25},
            PlotRange->{{0, 40}, {0, 25}}],
           TraditionalForm], {-1., 6.123233995736766*^-17}]}, 
        {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
         DiskBox[{0., 0.}, Offset[{2., 2.}, {0., 0.}]]}},
       FontSize->10]}, {
      StyleBox[{
        InsetBox["\<\"Input\"\>", 
         Offset[{0, -7}, {-5., 3.061616997868383*^-16}], {0, 1.}, Automatic, {
         1, 0}], InsetBox["\<\"1\"\>", 
         Offset[{0, -13}, {-4., 2.4492935982947064*^-16}], {0, 1.}, 
         Automatic, {1, 0}], 
        InsetBox["\<\"2\"\>", 
         Offset[{0, -13}, {-3., 1.8369701987210297*^-16}], {0, 1.}, 
         Automatic, {1, 0}], 
        InsetBox["\<\"3\"\>", 
         Offset[{0, -13}, {-2., 1.2246467991473532*^-16}], {0, 1.}, 
         Automatic, {1, 0}], 
        InsetBox["\<\"4\"\>", 
         Offset[{0, -13}, {-1., 6.123233995736766*^-17}], {0, 1.}, 
         Automatic, {1, 0}], 
        InsetBox["\<\"Output\"\>", Offset[{0, -7}, {0., 0.}], {0, 1.}, 
         Automatic, {1, 0}]},
       StripOnInput->False,
       FontColor->GrayLevel[0.5]], 
      StyleBox[{InsetBox[
         TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"2\""},
          "RowWithSeparators"], 
         Offset[{3.367778697655222*^-16, 5.5}, \
{-4.4, 2.694222958124177*^-16}], {0., -0.17}, Automatic, {
         1., -6.123233995736767*^-17}], InsetBox[
         TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"30\""},
          "RowWithSeparators"], 
         Offset[{3.367778697655222*^-16, 5.5}, \
{-3.4, 2.0818995585505003*^-16}], {0., -0.17}, Automatic, {
         1., -6.123233995736767*^-17}], InsetBox[
         TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"30\""},
          "RowWithSeparators"], 
         Offset[{3.3677786976552205*^-16, 5.5}, \
{-2.4000000000000004, 1.4695761589768238*^-16}], {0., -0.17}, Automatic, {
         1., -6.123233995736765*^-17}], InsetBox[
         TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"1\""},
          "RowWithSeparators"], 
         Offset[{3.3677786976552215*^-16, 5.5}, \
{-1.4, 8.572527594031473*^-17}], {0., -0.17}, Automatic, {
         1., -6.123233995736766*^-17}], InsetBox[
         TemplateBox[{"\[Cross]", "\"\[Cross]\"", "\"1\""},
          "RowWithSeparators"], 
         Offset[{3.3677786976552215*^-16, 5.5}, \
{-0.4, 2.4492935982947065*^-17}], {0., -0.17}, Automatic, {
         1., -6.123233995736766*^-17}]},
       StripOnInput->False,
       FontSize->8,
       FontWeight->"Thin",
       FontColor->GrayLevel[0.7]]}},
    AspectRatio->Full,
    BaseStyle->{TooltipBoxOptions -> {TooltipDelay -> 0.08}},
    ImageMargins->{{0, 0}, {0, 0}},
    ImagePadding->{{24., 26.5}, {26.999999999999996`, 14.}},
    ImageSize->{325.5, 41.000000000000014`},
    PlotRangePadding->0], ",", 
   GraphicsBox[
    NamespaceBox["NetworkGraphics",
     DynamicModuleBox[{Typeset`graph = HoldComplete[
       Graph[{{1}, {2}, {3}, {4}}, {{{1, 2}, {2, 3}, {3, 4}}, Null}, {
        GraphLayout -> {"LayeredDigraphEmbedding", "Orientation" -> Left}, 
         VertexLabels -> {
           Placed["Name", Tooltip]}}]]}, 
      TagBox[GraphicsGroupBox[{
         {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
          ArrowBox[{{-2.999999999999999, 
           8.038469108735353*^-8}, {-1.9999999999999993`, 
           5.3589794058235685`*^-8}}, 0.030239520958083826`], 
          ArrowBox[{{-1.9999999999999993`, 
           5.3589794058235685`*^-8}, {-0.9999999999999997, 
           2.6794897029117842`*^-8}}, 0.030239520958083826`], 
          ArrowBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0., 0.}},
            0.030239520958083826`]}, 
         {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
          TagBox[
           
           TooltipBox[
            DiskBox[{-2.999999999999999, 8.038469108735353*^-8}, 
             0.030239520958083826],
            RowBox[{"{", "1", "}"}]],
           Annotation[#, {1}, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            DiskBox[{-1.9999999999999993, 5.3589794058235685*^-8}, 
             0.030239520958083826],
            RowBox[{"{", "2", "}"}]],
           Annotation[#, {2}, "Tooltip"]& ], 
          TagBox[
           
           TooltipBox[
            DiskBox[{-0.9999999999999997, 2.6794897029117842*^-8}, 
             0.030239520958083826],
            RowBox[{"{", "3", "}"}]],
           Annotation[#, {3}, "Tooltip"]& ], 
          TagBox[
           TooltipBox[DiskBox[{0., 0.}, 0.030239520958083826],
            RowBox[{"{", "4", "}"}]],
           Annotation[#, {4}, "Tooltip"]& ]}}],
       MouseAppearanceTag["NetworkGraphics"]],
      AllowKernelInitialization->False]],
    DefaultBaseStyle->{
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
    
    FormatType->TraditionalForm,
    FrameTicks->None]}], "}"}]], "Output",
 CellChangeTimes->{{3.745480192728403*^9, 3.745480201822297*^9}, {
   3.7454802849484863`*^9, 3.745480296969692*^9}, 3.7454808164334097`*^9, 
   3.745480864266665*^9, 3.745480918576695*^9, {3.745481236296529*^9, 
   3.7454812502154703`*^9}, 3.745481293482677*^9, {3.745481391817006*^9, 
   3.745481497443316*^9}, {3.745481579965164*^9, 3.745481698767743*^9}, {
   3.745481753565482*^9, 3.745481805856771*^9}, {3.745481896310514*^9, 
   3.74548193646854*^9}, {3.745482101431595*^9, 3.745482108463851*^9}, 
   3.7454822530882607`*^9, {3.745482303540512*^9, 3.745482381987227*^9}, 
   3.7454826089077673`*^9, {3.745482669742793*^9, 3.7454826817030487`*^9}, 
   3.7561909818594503`*^9, 3.756191109382283*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"9d7f3363-eec2-40d1-90e5-d234879bd611"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"trained", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"net", ",", "data", ",", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", 
      RowBox[{"Quantity", "[", 
       RowBox[{"10", ",", "\"\<Seconds\>\""}], "]"}]}], ",", 
     RowBox[{"Method", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<SGD\>\"", ",", 
        RowBox[{"\"\<LearningRate\>\"", "\[Rule]", "0.001"}]}], "}"}]}], ",", 
     
     RowBox[{"TrainingProgressReporting", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"plotSolution", "[", 
          RowBox[{"#Net", ",", "#AbsoluteBatch"}], "]"}], "&"}], ",", 
        RowBox[{"\"\<Interval\>\"", "\[Rule]", "0.1"}]}], "}"}]}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"f", "=", "trained"}], ";"}], "\[IndentingNewLine]", "o"}], "Input",\

 CellDingbat->None,
 CellChangeTimes->{{3.7454811354770737`*^9, 3.74548116602055*^9}, 
   3.745482468538909*^9, {3.745482508526518*^9, 3.7454825117611027`*^9}, {
   3.745482578551602*^9, 3.745482580342547*^9}, 3.745482705354731*^9},
 CellLabel->"In[7]:=",
 CellID->682055402,ExpressionUUID->"8eea8ec5-21ff-4a55-9296-8e772791dc23"],

Cell[BoxData[
 OverlayBox[{
  GraphicsBox[RasterBox[CompressedData["
1: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
o8s1wcEu2YKf//0XiPPL8g==
    "], {{0, 0}, {25, 25}}, {0, 1.5265281200408936`}],
   Frame->False,
   FrameLabel->{None, None},
   FrameTicks->{{None, None}, {None, None}},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> Automatic}], 
  GraphicsBox[{{}, {
     {GrayLevel[1], AbsolutePointSize[6], AbsoluteThickness[1.6], 
      GeometricTransformationBox[InsetBox[
        StyleBox["\<\"x\"\>",
         StripOnInput->False,
         FontWeight->"Bold"], {0., 0.}], CompressedData["
1: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
z9x6w4fGTK8it0ke/B/VnouL
       "]]}, 
     {RGBColor[1, 0, 0], AbsolutePointSize[6], AbsoluteThickness[1.6], 
      GeometricTransformationBox[InsetBox[
        StyleBox["\<\"o\"\>",
         StripOnInput->False,
         FontWeight->"Bold"], {0., 0.}], CompressedData["
1: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
       
       "]]}, {}}, {}, {}, {}, {}},
   AspectRatio->1,
   Axes->{False, False},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   DisplayFunction->Identity,
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{None, None}, {None, None}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImagePadding->1,
   Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& ), "CopiedValueFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& )}},
   PlotRange->{{-5.903980991863126, 5.968499431497058}, {-5.991782673067526, 
    5.979708043309309}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.05], 
      Scaled[0.05]}},
   Ticks->{{}, {}}]}]], "Output",
 CellChangeTimes->{{3.745482499593343*^9, 3.745482522406786*^9}, 
   3.7454826382018948`*^9, {3.7454826999354973`*^9, 3.745482716280607*^9}, 
   3.756190997739641*^9, 3.7561911222591753`*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"c74df70c-8d95-4918-8662-1e51728d7fa5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "data", ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "1000"}], ",", 
    RowBox[{"Method", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<SGD\>\"", ",", 
       RowBox[{"\"\<LearningRate\>\"", "\[Rule]", "0.01"}]}], "}"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.745480209610277*^9, 3.745480211321336*^9}, {
   3.745480267348908*^9, 3.745480280051078*^9}, {3.7454803165716047`*^9, 
   3.745480327034265*^9}, {3.745480372257551*^9, 3.745480372423774*^9}, {
   3.74548096557034*^9, 3.745480976081429*^9}, {3.7454810706885138`*^9, 
   3.745481071198361*^9}, {3.7454811948751173`*^9, 3.7454812049466352`*^9}, 
   3.745481315261759*^9, {3.745482439556713*^9, 3.74548245062015*^9}, {
   3.7561909997341843`*^9, 3.756191000590317*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"824f2774-d33e-4cd0-bfd7-d26db99b984a"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"scalar\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["4", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{30, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{30}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {30}, "$OutputSize" -> 30, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{30}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {30}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{30}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{30}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1, 30}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 30, "$InputDimensions" -> {30}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{30}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association["Output" -> NetDecoder["Scalar", 
                    Association[], 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"30\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"30\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"scalar\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.745480281281232*^9, 3.745480327692478*^9}, 
   3.745480373345468*^9, 3.745480818180773*^9, 3.7454808654501534`*^9, 
   3.745480920928275*^9, 3.745480976692086*^9, 3.7454810739994087`*^9, {
   3.745481191389147*^9, 3.745481223780463*^9}, {3.745481307841819*^9, 
   3.745481316524271*^9}, 3.745482398687601*^9, {3.745482434992824*^9, 
   3.745482453354892*^9}, 3.745482641780814*^9, 3.75619100307093*^9, 
   3.756191125929287*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"8d9d915e-9379-46a6-a54f-38f67d9c2403"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["o"], "Input",
 CellChangeTimes->{3.745481096988291*^9},
 CellLabel->"In[11]:=",ExpressionUUID->"1f76320b-e6ea-478a-808e-618862f2e9e3"],

Cell[BoxData[
 OverlayBox[{
  GraphicsBox[RasterBox[CompressedData["
1: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
    "], {{0, 0}, {25,
     25}}, {0, 2.000500202178955}],
   Frame->False,
   FrameLabel->{None, None},
   FrameTicks->{{None, None}, {None, None}},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> Automatic}], 
  GraphicsBox[{{}, {
     {GrayLevel[1], AbsolutePointSize[6], AbsoluteThickness[1.6], 
      GeometricTransformationBox[InsetBox[
        StyleBox["\<\"x\"\>",
         StripOnInput->False,
         FontWeight->"Bold"], {0., 0.}], CompressedData["
1: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
z9x6w4fGTK8it0ke/B/VnouL
       "]]}, 
     {RGBColor[1, 0, 0], AbsolutePointSize[6], AbsoluteThickness[1.6], 
      GeometricTransformationBox[InsetBox[
        StyleBox["\<\"o\"\>",
         StripOnInput->False,
         FontWeight->"Bold"], {0., 0.}], CompressedData["
1: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
       
       "]]}, {}}, {}, {}, {}, {}},
   AspectRatio->1,
   Axes->{False, False},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   DisplayFunction->Identity,
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{None, None}, {None, None}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImagePadding->1,
   Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& ), "CopiedValueFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& )}},
   PlotRange->{{-5.903980991863126, 5.968499431497058}, {-5.991782673067526, 
    5.979708043309309}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.05], 
      Scaled[0.05]}},
   Ticks->{{}, {}}]}]], "Output",
 CellChangeTimes->{3.74548122559905*^9, 3.7454824554676123`*^9, 
  3.7561910061975107`*^9, 3.756191127583618*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"7abe0bbb-e0f8-40bc-9705-212dcc0442ae"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.745480164163608*^9, 
  3.745480164823264*^9}},ExpressionUUID->"328b84e8-135f-4870-96dc-\
40e08097bff6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["plot", "Section",
 CellChangeTimes->{{3.745480160287148*^9, 
  3.7454801607913647`*^9}},ExpressionUUID->"1540dfba-fc29-44b1-83a3-\
9634d850ba3c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"plotSolution", "[", 
   RowBox[{"net_", ",", "t_"}], "]"}], ":=", 
  RowBox[{"Overlay", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"k", "[", "net", "]"}], ",", "l", ",", 
     RowBox[{"Style", "[", 
      RowBox[{"t", ",", "Red", ",", "Bold", ",", 
       RowBox[{"FontSize", "\[Rule]", "24"}]}], "]"}]}], "}"}], 
   "]"}]}]], "Input",
 CellDingbat->None,
 CellChangeTimes->{{3.745480539242992*^9, 3.7454807597135267`*^9}},
 CellLabel->"In[12]:=",
 CellID->599883665,ExpressionUUID->"79fd782b-2c83-4c51-a21b-52c5e25cabe9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trained", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"net", ",", "data", ",", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", 
      RowBox[{"Quantity", "[", 
       RowBox[{"10", ",", "\"\<Seconds\>\""}], "]"}]}], ",", 
     RowBox[{"TrainingProgressReporting", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"plotSolution", "[", 
          RowBox[{"#Net", ",", "#AbsoluteBatch"}], "]"}], "&"}], ",", 
        RowBox[{"\"\<Interval\>\"", "\[Rule]", "0.1"}]}], "}"}]}]}], "]"}]}], 
  ";"}]], "Input",
 CellDingbat->None,
 CellLabel->"In[13]:=",
 CellID->391916176,ExpressionUUID->"fe9c1e52-744e-4bd3-b214-28e86e31d70a"]
}, Open  ]]
},
WindowSize->{1279.5, 1041.},
WindowMargins->{{528, Automatic}, {0, Automatic}},
Background->GrayLevel[1],
FrontEndVersion->"12.2 for Linux x86 (64-bit) (December 12, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"63e44ebc-3ca6-4165-9bb8-8cbc68c14a70"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 397, 8, 101, "Input",ExpressionUUID->"b09ee332-7af9-45f6-9b23-cfa1a69fc414"],
Cell[980, 32, 647, 14, 76, "Message",ExpressionUUID->"d5f990db-646b-47cd-83c1-3e3aa3f52a67"],
Cell[1630, 48, 648, 14, 76, "Message",ExpressionUUID->"bb32ecd7-2f1c-47d5-b0d1-0ca966f84779"],
Cell[2281, 64, 642, 13, 76, "Message",ExpressionUUID->"2663242c-9e9f-41d1-a6a5-8d4edcb40dc3"],
Cell[2926, 79, 642, 13, 76, "Message",ExpressionUUID->"8bbf057f-a295-4cfb-84e1-d9f5c2382a7c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3605, 97, 357, 6, 59, "Input",ExpressionUUID->"8f3daf38-a2fb-4ae2-84af-51f2b56567a6"],
Cell[3965, 105, 92311, 1624, 121, "Output",ExpressionUUID->"714bd7e8-78d5-4a76-9cdf-bc4e61b7cb80"]
}, Open  ]],
Cell[CellGroupData[{
Cell[96313, 1734, 160, 3, 133, "Section",ExpressionUUID->"bf6c5e1e-c568-432c-b2b6-a835425b48ed"],
Cell[CellGroupData[{
Cell[96498, 1741, 1555, 31, 225, "Input",ExpressionUUID->"05e86896-846c-4af0-84a7-7746d3b04982"],
Cell[98056, 1774, 85723, 1781, 648, "Output",ExpressionUUID->"9d7f3363-eec2-40d1-90e5-d234879bd611"]
}, Open  ]],
Cell[CellGroupData[{
Cell[183816, 3560, 1168, 29, 101, "Input",ExpressionUUID->"8eea8ec5-21ff-4a55-9296-8e772791dc23",
 CellID->682055402],
Cell[184987, 3591, 11915, 220, 379, "Output",ExpressionUUID->"c74df70c-8d95-4918-8662-1e51728d7fa5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[196939, 3816, 909, 17, 31, "Input",ExpressionUUID->"824f2774-d33e-4cd0-bfd7-d26db99b984a"],
Cell[197851, 3835, 24503, 499, 78, "Output",ExpressionUUID->"8d9d915e-9379-46a6-a54f-38f67d9c2403"]
}, Open  ]],
Cell[CellGroupData[{
Cell[222391, 4339, 148, 2, 31, "Input",ExpressionUUID->"1f76320b-e6ea-478a-808e-618862f2e9e3"],
Cell[222542, 4343, 11934, 221, 379, "Output",ExpressionUUID->"7abe0bbb-e0f8-40bc-9705-212dcc0442ae"]
}, Open  ]],
Cell[234491, 4567, 278, 5, 147, "Input",ExpressionUUID->"328b84e8-135f-4870-96dc-40e08097bff6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[234806, 4577, 151, 3, 68, "Section",ExpressionUUID->"1540dfba-fc29-44b1-83a3-9634d850ba3c"],
Cell[234960, 4582, 563, 15, 31, "Input",ExpressionUUID->"79fd782b-2c83-4c51-a21b-52c5e25cabe9",
 CellID->599883665],
Cell[235526, 4599, 691, 18, 88, "Input",ExpressionUUID->"fe9c1e52-744e-4bd3-b214-28e86e31d70a",
 CellID->391916176]
}, Open  ]]
}
]
*)

