(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     45263,        967]
NotebookOptionsPosition[     42646,        908]
NotebookOutlinePosition[     42998,        924]
CellTagsIndexPosition[     42955,        921]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[TextData[StyleBox["Sequence regression",
 StripOnInput->False,
 LineColor->RGBColor[
  0.22899251821568467`, 0.7568250097244553, 0.18772375680879838`],
 FrontFaceColor->RGBColor[
  0.22899251821568467`, 0.7568250097244553, 0.18772375680879838`],
 BackFaceColor->RGBColor[
  0.22899251821568467`, 0.7568250097244553, 0.18772375680879838`],
 GraphicsColor->RGBColor[
  0.22899251821568467`, 0.7568250097244553, 0.18772375680879838`],
 FontWeight->Normal,
 FontColor->RGBColor[
  0.22899251821568467`, 0.7568250097244553, 0.18772375680879838`]]], "Section",\

 Evaluatable->True,
 CellGroupingRules->"InputGroupin",
 CellEvaluationFunction->cel`gTalker,
 CellFrameLabels->{{None, ""}, {None, None}},
 CellChangeTimes->{{3.7555334383709097`*^9, 3.755533441962647*^9}},
 CellLabel->"In[71]:=",ExpressionUUID->"b083b93e-e8d5-414c-a2be-eb5848bbff87"],

Cell[TextData[StyleBox["Integer Addition",
 StripOnInput->False,
 LineColor->RGBColor[1, 0, 1],
 FrontFaceColor->RGBColor[1, 0, 1],
 BackFaceColor->RGBColor[1, 0, 1],
 GraphicsColor->RGBColor[1, 0, 1],
 FontWeight->Normal,
 FontColor->RGBColor[1, 0, 1]]], "Subsection",
 Evaluatable->True,
 CellGroupingRules->"InputGroupin",
 CellEvaluationFunction->cel`gTalker,
 CellFrameLabels->{{None, ""}, {None, None}},
 CellChangeTimes->{{3.755533483490107*^9, 3.755533488504822*^9}},
 CellLabel->"In[73]:=",ExpressionUUID->"1424fa0e-900f-4b6b-a1b4-0a1e6b2138c8"],

Cell[TextData[StyleBox["In this example, a net is trained to add two \
two-digit integers together.",
 StripOnInput->False,
 LineColor->RGBColor[1, 0, 0],
 FrontFaceColor->RGBColor[1, 0, 0],
 BackFaceColor->RGBColor[1, 0, 0],
 GraphicsColor->RGBColor[1, 0, 0],
 FontWeight->Normal,
 FontColor->RGBColor[1, 0, 0]]], "Text",
 Evaluatable->True,
 CellGroupingRules->"InputGroupin",
 CellEvaluationFunction->cel`gTalker,
 CellFrameLabels->{{None, ""}, {None, None}},
 CellChangeTimes->{{3.755533490557225*^9, 3.755533504824582*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"4add651a-c401-4a51-82c1-42293e13a296"],

Cell[TextData[StyleBox["What makes the problem hard is that the inputs are \
strings rather than numeric values, whereas the output is a numeric value.",
 StripOnInput->False,
 LineColor->RGBColor[1, 0, 0],
 FrontFaceColor->RGBColor[1, 0, 0],
 BackFaceColor->RGBColor[1, 0, 0],
 GraphicsColor->RGBColor[1, 0, 0],
 FontWeight->Normal,
 FontColor->RGBColor[1, 0, 0]]], "Text",
 Evaluatable->True,
 CellGroupingRules->"InputGroupin",
 CellEvaluationFunction->cel`gTalker,
 CellFrameLabels->{{None, ""}, {None, None}},
 CellChangeTimes->{{3.7555335063453712`*^9, 3.75553353081612*^9}},
 CellLabel->"In[77]:=",ExpressionUUID->"ae4aea1d-745e-4aab-8bbb-89629eedf2c3"],

Cell[TextData[StyleBox["For example, the net takes as input 25 plus 33 string \
and needs to return a real number close to 58.",
 StripOnInput->False,
 LineColor->RGBColor[1, 0, 0],
 FrontFaceColor->RGBColor[1, 0, 0],
 BackFaceColor->RGBColor[1, 0, 0],
 GraphicsColor->RGBColor[1, 0, 0],
 FontWeight->Normal,
 FontColor->RGBColor[1, 0, 0]]], "Text",
 Evaluatable->True,
 CellGroupingRules->"InputGroupin",
 CellEvaluationFunction->cel`gTalker,
 CellFrameLabels->{{None, ""}, {None, None}},
 CellChangeTimes->{{3.755533532016027*^9, 3.755533558174869*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"91e432f5-1cce-4dec-b973-036e1e13e7fd"],

Cell[TextData[StyleBox["Note that the input is variable length, as the \
training data contains examples of length 3 (5 + 5), length 4 (5+ 10) and \
length 5 10+10",
 StripOnInput->False,
 LineColor->RGBColor[1, 0, 0],
 FrontFaceColor->RGBColor[1, 0, 0],
 BackFaceColor->RGBColor[1, 0, 0],
 GraphicsColor->RGBColor[1, 0, 0],
 FontWeight->Normal,
 FontColor->RGBColor[1, 0, 0]]], "Text",
 Evaluatable->True,
 CellGroupingRules->"InputGroupin",
 CellEvaluationFunction->cel`gTalker,
 CellFrameLabels->{{None, ""}, {None, None}},
 CellChangeTimes->{{3.7555335593928537`*^9, 3.7555335944366083`*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"c5e4ef63-4da6-42d9-9e77-20e54087805e"],

Cell[TextData[StyleBox["Create training data based on strings that describe \
two digit additions and the corresponding numeric result.",
 StripOnInput->False,
 LineColor->RGBColor[0, 0, 1],
 FrontFaceColor->RGBColor[0, 0, 1],
 BackFaceColor->RGBColor[0, 0, 1],
 GraphicsColor->RGBColor[0, 0, 1],
 FontWeight->Normal,
 FontColor->RGBColor[0, 0, 1]]], "Text",
 Evaluatable->True,
 CellGroupingRules->"InputGroupin",
 CellEvaluationFunction->cel`gTalker,
 CellFrameLabels->{{None, ""}, {None, None}},
 CellChangeTimes->{{3.755533609638076*^9, 3.7555336306841307`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"679c3a0e-c89f-41df-853b-f2ec036a9842"],

Cell[BoxData[
 RowBox[{
  RowBox[{"vectorEmbedder", "=", 
   RowBox[{"NetEncoder", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<Characters\>\"", ",", 
      RowBox[{"{", 
       RowBox[{"DigitCharacter", ",", "\"\<+\>\""}], "}"}]}], "}"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.755588772489727*^9, 3.75558878355658*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"89d93dc3-4316-4dba-80ee-a4627c9fb7e6"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"makeRule", "[", 
    RowBox[{"a_", ",", "b_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"IntegerString", "[", "a", "]"}], "<>", "\"\<+\>\"", "<>", 
     RowBox[{"IntegerString", "[", "b", "]"}]}], "\[Rule]", 
    RowBox[{"a", "+", "b"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"trainingData", "=", 
   RowBox[{"Flatten", "@", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"makeRule", "[", 
       RowBox[{"i", ",", "j"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "0", ",", "99"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", "0", ",", "99"}], "}"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RandomSample", "[", 
   RowBox[{"trainingData", ",", "4"}], "]"}], "//", "InputForm"}]}], "Input",
 CellLabel->"In[3]:=",ExpressionUUID->"65c27c13-0a0f-4e21-afff-15b5bd12a063"],

Cell["\<\
{\"84+19\" -> 103, \"49+25\" -> 74, 
 \"43+73\" -> 116, \"89+91\" -> 180}\
\>", "Output",
 CellChangeTimes->{3.7555887941762543`*^9},
 CellLabel->
  "Out[5]//InputForm=",ExpressionUUID->"d8058a4f-dcf1-4941-bd8f-7ac636da1ce2"]
}, Open  ]],

Cell[TextData[StyleBox["Create a net composed of recurrent layers to read an \
input string and predict the numeric result:",
 StripOnInput->False,
 LineColor->RGBColor[
  0.22899251821568467`, 0.7568250097244553, 0.18772375680879838`],
 FrontFaceColor->RGBColor[
  0.22899251821568467`, 0.7568250097244553, 0.18772375680879838`],
 BackFaceColor->RGBColor[
  0.22899251821568467`, 0.7568250097244553, 0.18772375680879838`],
 GraphicsColor->RGBColor[
  0.22899251821568467`, 0.7568250097244553, 0.18772375680879838`],
 FontWeight->Normal,
 FontColor->RGBColor[
  0.22899251821568467`, 0.7568250097244553, 0.18772375680879838`]]], "Text",
 Evaluatable->True,
 CellGroupingRules->"InputGroupin",
 CellEvaluationFunction->cel`gTalker,
 CellFrameLabels->{{None, ""}, {None, None}},
 CellChangeTimes->{{3.755589914895871*^9, 3.755589936914629*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"9019b308-a833-4191-9ffb-1298a414c61e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"UnitVectorLayer", "[", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"LongShortTermMemoryLayer", "[", "40", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"LongShortTermMemoryLayer", "[", "20", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"SequenceLastLayer", "[", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"LinearLayer", "[", "]"}]}], "\[IndentingNewLine]", "}"}], ",", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", "vectorEmbedder"}], ",", 
     RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Real\>\""}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.755589948228828*^9, 3.7555899675621157`*^9}},
 CellLabel->"In[8]:=",
 CellID->2045687829,ExpressionUUID->"127e0493-9cb4-46b4-8c5a-4aa45c5ab4ff"],

Cell[TextData[StyleBox["Train the network",
 StripOnInput->False,
 LineColor->RGBColor[
  0.22899251821568467`, 0.7568250097244553, 0.18772375680879838`],
 FrontFaceColor->RGBColor[
  0.22899251821568467`, 0.7568250097244553, 0.18772375680879838`],
 BackFaceColor->RGBColor[
  0.22899251821568467`, 0.7568250097244553, 0.18772375680879838`],
 GraphicsColor->RGBColor[
  0.22899251821568467`, 0.7568250097244553, 0.18772375680879838`],
 FontWeight->Normal,
 FontColor->RGBColor[
  0.22899251821568467`, 0.7568250097244553, 0.18772375680879838`]]], "Text",
 Evaluatable->True,
 CellGroupingRules->"InputGroupin",
 CellEvaluationFunction->cel`gTalker,
 CellFrameLabels->{{None, ""}, {None, None}},
 CellChangeTimes->{{3.755589974048891*^9, 3.755589978056836*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"1c295364-3bf1-4589-afa6-087e0f75a1a5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "trainingData", ",", 
    RowBox[{"BatchSize", "\[Rule]", "64"}], ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "200"}], ",", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"Scaled", "[", "0.1", "]"}]}], ",", 
    RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.755590000283008*^9, 3.7555900047046432`*^9}},
 CellLabel->"In[12]:=",
 CellID->1112707689,ExpressionUUID->"73708de4-0918-4060-9231-60449a81ab64"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"string\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["5", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "UnitVector", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["ClassCount" -> 11, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1926175291]}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1926175291]}, 
                    NeuralNetworks`IndexIntegerT[11]]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1926175291], 11}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "LongShortTermMemory", "Arrays" -> 
                    Association[
                    "InputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{40, 11}], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{40, 40}], 
                    "InputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{40}], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{40, 11}], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{40, 40}], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{40}], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{40, 11}], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{40, 40}], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{40}], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{40, 11}], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{40, 40}], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{40}]], "Parameters" -> 
                    Association[
                    "OutputSize" -> 40, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    11, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1926175291]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1926175291], 11}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1926175291], 40}, 
                    NeuralNetworks`RealT]], "States" -> 
                    Association[
                    "State" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT], 
                    "CellState" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "LongShortTermMemory", "Arrays" -> 
                    Association[
                    "InputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{20, 40}], 
                    "InputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{20, 20}], 
                    "InputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{20}], 
                    "OutputGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{20, 40}], 
                    "OutputGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{20, 20}], 
                    "OutputGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{20}], 
                    "ForgetGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{20, 40}], 
                    "ForgetGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{20, 20}], 
                    "ForgetGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{20}], 
                    "MemoryGateInputWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{20, 40}], 
                    "MemoryGateStateWeights" -> 
                    NeuralNetworks`Private`DummyRawArray[{20, 20}], 
                    "MemoryGateBiases" -> 
                    NeuralNetworks`Private`DummyRawArray[{20}]], "Parameters" -> 
                    Association[
                    "OutputSize" -> 20, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[None], "$InputSize" -> 
                    40, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1926175291]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1926175291], 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1926175291], 20}, 
                    NeuralNetworks`RealT]], "States" -> 
                    Association[
                    "State" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT], 
                    "CellState" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "SequenceLast", "Arrays" -> Association[], 
                    "Parameters" -> Association[], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1926175291], 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1, 20}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 20, "$InputDimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Characters", 
                    Association[
                    "Encoding" -> NeuralNetworks`ValidatedParameter[
                    MXNetLink`CharacterEncodingData[
                    1, RawArray["UnsignedInteger8",{128, 0, 0, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 11, 128, 128, 128, 128, 1, 
                    2, 3, 4, 5, 6, 7, 8, 9, 10, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128}], 
                    RawArray["UnsignedInteger8",{48, 49, 50, 51, 52, 53, 54, 
                    55, 56, 57, 43}], 11, {DigitCharacter, "+"}]], 
                    "OutputForm" -> "Index", "IgnoreCase" -> False, "Count" -> 
                    11, "TargetLength" -> All, "$TargetLength" -> 
                    NeuralNetworks`LengthVar[0]], 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1926175291]}, 
                    NeuralNetworks`IndexIntegerT[11]]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "InteriorStates" -> 
                    Association[{2, "State"} -> 
                    NeuralNetworks`NetPath["Nodes", "2", "States", "State"], {
                    2, "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "States", "CellState"], {3, "State"} -> 
                    NeuralNetworks`NetPath["Nodes", "3", "States", "State"], {
                    3, "CellState"} -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "States", "CellState"]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"string\""}, {
                    TemplateBox[{"\"seq. of \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], "\" \"", 
                    TemplateBox[{"\"indices\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"range\"",
                     "\":\"", "\" \"", 
                    TemplateBox[{"1", "\"..\"", "11"}, "RowDefault"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["UnitVectorLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"11\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LongShortTermMemoryLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"40\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LongShortTermMemoryLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"20\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SequenceLastLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.755589998584787*^9, 3.755590068893384*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"8dc047c5-afa2-4d31-b1f4-25ffddc7812c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Round", "@", 
  RowBox[{"trained", "[", 
   RowBox[{"{", 
    RowBox[{
    "\"\<1+1\>\"", ",", "\"\<10+25\>\"", ",", "\"\<9+11\>\"", ",", 
     "\"\<44+44\>\""}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7555900882644157`*^9, 3.755590093581204*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"04dc4eb9-c4fb-4c33-ae21-87f120ea87e2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "35", ",", "20", ",", "88"}], "}"}]], "Output",
 CellChangeTimes->{{3.755590076052381*^9, 3.755590093994384*^9}},
 CellLabel->"Out[15]=",ExpressionUUID->"3e3715d4-bef0-4432-879e-a31352298615"]
}, Open  ]],

Cell[TextData[StyleBox["Sequenc",
 StripOnInput->False,
 LineColor->RGBColor[
  0.22899251821568467`, 0.7568250097244553, 0.18772375680879838`],
 FrontFaceColor->RGBColor[
  0.22899251821568467`, 0.7568250097244553, 0.18772375680879838`],
 BackFaceColor->RGBColor[
  0.22899251821568467`, 0.7568250097244553, 0.18772375680879838`],
 GraphicsColor->RGBColor[
  0.22899251821568467`, 0.7568250097244553, 0.18772375680879838`],
 FontWeight->Normal,
 FontColor->RGBColor[
  0.22899251821568467`, 0.7568250097244553, 0.18772375680879838`]]], "Section",\

 Evaluatable->True,
 CellGroupingRules->"InputGroupin",
 CellEvaluationFunction->cel`gTalker,
 CellFrameLabels->{{None, ""}, {None, None}},
 CellChangeTimes->{{3.755590098474938*^9, 
  3.75559010320418*^9}},ExpressionUUID->"c795c769-db8f-4fce-9e8f-\
ab47818e0fe4"]
},
WindowSize->{1720, 1388},
WindowMargins->{{Automatic, 0}, {0, Automatic}},
Magnification->2,
FrontEndVersion->"11.3 for Linux x86 (64-bit) (March 6, 2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 848, 19, 163, "Section",ExpressionUUID->"b083b93e-e8d5-414c-a2be-eb5848bbff87",
 Evaluatable->True,
 CellGroupingRules->"InputGroupin"],
Cell[1409, 41, 554, 13, 136, "Subsection",ExpressionUUID->"1424fa0e-900f-4b6b-a1b4-0a1e6b2138c8",
 Evaluatable->True,
 CellGroupingRules->"InputGroupin"],
Cell[1966, 56, 607, 14, 69, "Text",ExpressionUUID->"4add651a-c401-4a51-82c1-42293e13a296",
 Evaluatable->True,
 CellGroupingRules->"InputGroupin"],
Cell[2576, 72, 660, 14, 114, "Text",ExpressionUUID->"ae4aea1d-745e-4aab-8bbb-89629eedf2c3",
 Evaluatable->True,
 CellGroupingRules->"InputGroupin"],
Cell[3239, 88, 634, 14, 69, "Text",ExpressionUUID->"91e432f5-1cce-4dec-b973-036e1e13e7fd",
 Evaluatable->True,
 CellGroupingRules->"InputGroupin"],
Cell[3876, 104, 675, 15, 114, "Text",ExpressionUUID->"c5e4ef63-4da6-42d9-9e77-20e54087805e",
 Evaluatable->True,
 CellGroupingRules->"InputGroupin"],
Cell[4554, 121, 644, 14, 69, "Text",ExpressionUUID->"679c3a0e-c89f-41df-853b-f2ec036a9842",
 Evaluatable->True,
 CellGroupingRules->"InputGroupin"],
Cell[5201, 137, 408, 10, 60, "Input",ExpressionUUID->"89d93dc3-4316-4dba-80ee-a4627c9fb7e6"],
Cell[CellGroupData[{
Cell[5634, 151, 911, 25, 147, "Input",ExpressionUUID->"65c27c13-0a0f-4e21-afff-15b5bd12a063"],
Cell[6548, 178, 235, 6, 133, "Output",ExpressionUUID->"d8058a4f-dcf1-4941-bd8f-7ac636da1ce2"]
}, Open  ]],
Cell[6798, 187, 920, 19, 69, "Text",ExpressionUUID->"9019b308-a833-4191-9ffb-1298a414c61e",
 Evaluatable->True,
 CellGroupingRules->"InputGroupin"],
Cell[7721, 208, 898, 19, 319, "Input",ExpressionUUID->"127e0493-9cb4-46b4-8c5a-4aa45c5ab4ff",
 CellID->2045687829],
Cell[8622, 229, 839, 18, 69, "Text",ExpressionUUID->"1c295364-3bf1-4589-afa6-087e0f75a1a5",
 Evaluatable->True,
 CellGroupingRules->"InputGroupin"],
Cell[CellGroupData[{
Cell[9486, 251, 557, 11, 104, "Input",ExpressionUUID->"73708de4-0918-4060-9231-60449a81ab64",
 CellID->1112707689],
Cell[10046, 264, 31127, 600, 172, "Output",ExpressionUUID->"8dc047c5-afa2-4d31-b1f4-25ffddc7812c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[41210, 869, 359, 8, 60, "Input",ExpressionUUID->"04dc4eb9-c4fb-4c33-ae21-87f120ea87e2"],
Cell[41572, 879, 241, 4, 97, "Output",ExpressionUUID->"3e3715d4-bef0-4432-879e-a31352298615"]
}, Open  ]],
Cell[41828, 886, 814, 20, 134, "Section",ExpressionUUID->"c795c769-db8f-4fce-9e8f-ab47818e0fe4",
 Evaluatable->True,
 CellGroupingRules->"InputGroupin"]
}
]
*)

